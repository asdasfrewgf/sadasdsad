# -*- coding: utf-8 -*-
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import config
import menu
import sqlite3
import statess
import random
import requests
from datetime import datetime, timedelta, date
from pyqiwip2p import QiwiP2P
import time
from requests import get
import asyncio
import aiohttp
from aiogram.utils.callback_data import CallbackData
import logging
import json
from random import choice
import os

async def stock_panel() -> InlineKeyboardMarkup:
    bitcoin = InlineKeyboardButton(text="Bitcoin", callback_data="bitcoin")
    ethereum = InlineKeyboardButton(text="Ethereum", callback_data="ethereum")
    polkadot = InlineKeyboardButton(text="Polkadot", callback_data="polkadot")
    ripple = InlineKeyboardButton(text="Ripple", callback_data="ripple")
    doge = InlineKeyboardButton(text="DogeCoin", callback_data="doge")
    litecoin = InlineKeyboardButton(text="Litecoin", callback_data="litecoin")
    terra = InlineKeyboardButton(text="Terra", callback_data="terra")
    solana = InlineKeyboardButton(text="Solana", callback_data="solana")
    tron = InlineKeyboardButton(text="TRON", callback_data="tron")
    cardano = InlineKeyboardButton(text="Cardano", callback_data="cardano")
    return InlineKeyboardMarkup(row_width=2).add(bitcoin, ethereum, polkadot, ripple, doge, litecoin, terra, solana,tron, cardano)

async def choose(amount) -> InlineKeyboardMarkup:
    up = InlineKeyboardButton(text="–í–≤–µ—Ä—Ö", callback_data=choose_callback.new(amount=amount, direction="upbtc"))
    down = InlineKeyboardButton(text="–í–Ω–∏–∑", callback_data=choose_callback.new(amount=amount, direction="downbtc"))
    return InlineKeyboardMarkup(row_width=1).add(up, down)

async def choose1(amount) -> InlineKeyboardMarkup:
    up = InlineKeyboardButton(text="–í–≤–µ—Ä—Ö", callback_data=choose_callback.new(amount=amount, direction="upeth"))
    down = InlineKeyboardButton(text="–í–Ω–∏–∑", callback_data=choose_callback.new(amount=amount, direction="downeth"))
    return InlineKeyboardMarkup(row_width=1).add(up, down)

async def choose2(amount) -> InlineKeyboardMarkup:
    up = InlineKeyboardButton(text="–í–≤–µ—Ä—Ö", callback_data=choose_callback.new(amount=amount, direction="upltc"))
    down = InlineKeyboardButton(text="–í–Ω–∏–∑", callback_data=choose_callback.new(amount=amount, direction="downltc"))
    return InlineKeyboardMarkup(row_width=1).add(up, down)

choose_callback = CallbackData("choose", "amount", "direction")

bot = Bot(config.API_Trade, parse_mode='HTML')
workerbot = Bot(config.API_Worker, parse_mode='HTML')
dp = Dispatcher(bot,storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)
bd = os.path.abspath(os.path.join('data', 'database.db'))


##############################################
canal = -1002383417978
TC_group = -1002383417978
##############################################

##############################################
API_URL = 'https://blockchain.info/ru/ticker'
solana_url = 'https://api.binance.com/api/v3/ticker/price?symbol=SOLBTC'
apis_url = "https://api.terra.ai/price"
##############################################


@dp.message_handler(commands="start", state='*')
async def start(message: types.Message):
    ref_id = message.get_args()
    with sqlite3.connect(bd) as c:
        check = c.execute("SELECT id FROM mamonts_trade WHERE id = ?", (message.from_user.id,)).fetchone()
    if check is None:
        with sqlite3.connect(bd) as c:
            ref = c.execute("SELECT id FROM workers WHERE ref_code = ?", (ref_id,)).fetchone()
        if ref is None:
            await message.answer('<b>üîí –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!</b>\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:')
            await statess.code.q1.set()
        else:
            text=f'''
            <b>üî∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—É—é –∫—Ä–∏–ø—Ç–æ-–±–∏—Ä–∂—É Huobi!

Huobi –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–¥–æ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏.</b>'''
            with sqlite3.connect(bd) as c:
                c.execute('INSERT INTO mamonts_trade VALUES(?,?,?,?,?,?,?,?,?,?,?,?)',(message.from_user.id, '0', ref_id, '0', '0', '100', message.from_user.first_name, message.from_user.username, '0', '0', '0', '0'))
            await workerbot.send_message(ref[0], f"<b><i>üéâ–£ –≤–∞—Å –Ω–æ–≤—ã–π ü¶£ –º–∞–º–æ–Ω—Ç! @{message.from_user.username}</i></b>")
            await bot.send_message(message.from_user.id, text=text, reply_markup=menu.mainkb, parse_mode='HTML')
    else:
        text1=f'''
            <b>üî∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—É—é –∫—Ä–∏–ø—Ç–æ-–±–∏—Ä–∂—É Huobi!

Huobi –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–¥–æ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏.</b>'''
        await bot.send_message(message.from_user.id, text=text1, reply_markup=menu.mainkb, parse_mode='HTML')

@dp.message_handler(state=statess.code.q1)
async def spammers(message: types.Message,state:FSMContext):
    with sqlite3.connect(bd) as c:
        ref = c.execute("SELECT id FROM workers WHERE ref_code = ?", (message.text,)).fetchone()
    if ref != None:
        with sqlite3.connect(bd) as c:
            c.execute('INSERT INTO mamonts_trade VALUES(?,?,?,?,?,?,?,?,?,?,?,?)',(message.from_user.id, '0', message.text, '0', '0', '100', message.from_user.first_name, message.from_user.username, '0', '0', '0', '0'))
        text=f'''
            <b>üî∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—É—é –∫—Ä–∏–ø—Ç–æ-–±–∏—Ä–∂—É Huobi!

Huobi –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–¥–æ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏.</b>'''
        await workerbot.send_message(ref[0], f"<b><i>üéâ–£ –≤–∞—Å –Ω–æ–≤—ã–π ü¶£ –º–∞–º–æ–Ω—Ç! @{message.from_user.username}</i></b>")
        await message.answer(text, reply_markup=menu.mainkb, parse_mode='HTML')
        await state.finish()
    else:
        await message.answer('<b>üîí –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π.</b>')

async def fetch_price(session, crypto):
    url = f"https://min-api.cryptocompare.com/data/price?fsym={crypto}&tsyms=USD"
    async with session.get(url) as response:
        data = await response.json()
        price = data['USD']
        return f"{price}"

@dp.message_handler(content_types=['text'], text='üíº –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def buy(message: types.Message, state: FSMContext):
    await state.finish()
    with sqlite3.connect(bd) as c:
        info = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(message.chat.id,)).fetchone()
    smiles = ["üü¢", "üü°", "üü†", "üî¥"]
    text=f'''
    <b>üì≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b>

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíµ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{info[3]} RUB</b>
üóÑ ID: <b>{message.from_user.id}</b>
üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: <b>{info[9]}</b>
üíº –ö—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å:
0.0 BTC
0.0 ETH
0.0 LTC
üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: <b>{random.randint(1900,2500)}</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å Bitcoin: {random.choice(smiles)}
–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å  Ethereum: {random.choice(smiles)}
–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å  Litecoin: {random.choice(smiles)}</b>
''' 
    text1 = f'''
    <b>üì≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b>

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úÖ
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíµ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{info[3]} RUB</b>
üóÑ ID: <b>{message.from_user.id}</b>
üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: <b>{info[9]}</b>
üíº –ö—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å:
0.0 BTC
0.0 ETH
0.0 LTC
üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: <b>{random.randint(1900,2500)}</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å Bitcoin: {random.choice(smiles)}
–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å  Ethereum: {random.choice(smiles)}
–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å  Litecoin: {random.choice(smiles)}</b>'''
    if info[4] == 0:
        if info[8] == 0:
            await bot.send_photo(message.from_user.id, photo=config.lk_photo, caption=text,reply_markup=menu.lk, parse_mode='HTML')
        else:
            await bot.send_photo(message.from_user.id, photo=config.lk_photo, caption=text1, reply_markup=menu.lk, parse_mode='HTML')
    else:
        await message.answer(f"–£ –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç.")

@dp.message_handler(content_types=['text'], text='üë®üèª‚Äçüíª –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
async def buy(message: types.Message, state: FSMContext):
    await state.finish()
    with sqlite3.connect(bd) as c:
        info = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(message.chat.id,)).fetchone()
    if info[4] == 0:
        text=f'''
        üìò –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Huobi. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π.
–î–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç–Ω–µ–µ, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

–ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É:

1 - –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å.
2 - –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.
3 - –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –±—É–¥–µ—Ç —Å –≤–∞–º–∏!'''
        await bot.send_photo(message.from_user.id, photo=config.support, caption=text, reply_markup=menu.tp)
    else:
        await message.answer('–£ –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç.')

@dp.message_handler(content_types=['text'], text='üìä –ú–æ–∏ –∞–∫—Ç–∏–≤—ã')
async def buy(message: types.Message, state: FSMContext):
    await state.finish()
    with sqlite3.connect(bd) as c:
        info = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(message.chat.id,)).fetchone()
    if info[4] == 0:
        if info[10] == 0:
            text= f'''
        üí† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:
        '''
            with open('Trade/photo/huobiii.jpg', 'rb') as photo:
                await bot.send_photo(message.from_user.id, photo, caption=text, parse_mode='HTML', reply_markup=await stock_panel())
        else:
            await message.answer(f"<b>‚ö† –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>\n\n<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>", parse_mode='HTML', reply_markup=menu.tp)
    else:
        await message.answer('–£ –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç.')

@dp.message_handler(content_types=['text'], text='üî∑ –û —Å–µ—Ä–≤–∏—Å–µ')
async def buy(message: types.Message, state: FSMContext):
    await state.finish()
    with sqlite3.connect(bd) as c:
        info = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(message.chat.id,)).fetchone()
    if info[4] == 0:
        text = f'''
        <b>üìò –û —Å–µ—Ä–≤–∏—Å–µ</b>

<b>Huobi</b> - —ç—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏. 

–ò–º–µ—è –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤—ã –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏.

–ë–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ—Å—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Huobi –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤. –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ª–µ–≥–∫–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –∫–∞–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö, —Ç–∞–∫ –∏ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.'''
        await bot.send_photo(message.from_user.id, photo=config.about_service, caption=text, parse_mode='HTML', reply_markup=menu.about_me)
    else:
        await message.answer(f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@dp.callback_query_handler(lambda c: c.data =='verif')
async def process_callback_button1(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(call.from_user.id,)).fetchone()
    if info[8] == 0:
        text = f'''
        ü§∑üèª‚Äç‚ôÄÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—Å–∞–≤ "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è" –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–ø–∞—Å–∏–±–æ!

üî∑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ –≤—ã–ø–ª–∞—Ç–µ.

üî∑ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.

üî∑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –±–æ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö.

üî∑ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'''
        await call.bot.send_photo(call.from_user.id, photo=config.verif, caption=text, reply_markup=menu.verifir)
    else:
        await call.answer(show_alert=True, text=f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")

@dp.callback_query_handler(lambda c: c.data == 'popolnenie') # qiwi_payments
async def process_callback_button1(callback_query: types.CallbackQuery):
    try:
        await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
        with sqlite3.connect(bd) as c:
            ref = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(callback_query.from_user.id,)).fetchone()
            info = c.execute('SELECT * FROM workers WHERE ref_code = ?',(ref[2],)).fetchone()
        await bot.send_message(callback_query.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - {info[6]} RUB</i>', parse_mode='HTML')
        await statess.Qiwi.q1.set() 
    except:
        with sqlite3.connect(bd) as c:
            c.execute(f'DELETE FROM mamonts_trade WHERE id = {callback_query.from_user.id}')
        await callback_query.message.answer(f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω\n–í–≤–µ–¥–∏—Ç–µ /start')

@dp.message_handler(state=statess.Qiwi.q1)
async def spammers(message: types.Message,state:FSMContext):
    if message.text.isdigit():
        with sqlite3.connect(bd) as c:
            ref = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(message.from_user.id,)).fetchone()
            info = c.execute('SELECT * FROM workers WHERE ref_code = ?',(ref[2],)).fetchone()
        if int(message.text) < info[6]:
            await message.answer(f"<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>", parse_mode='HTML')
            await state.finish()
        else:
            await state.finish()
            try:
                price = int(message.text)
                comment = random.randint(100000, 999999)
                with sqlite3.connect(bd) as c:
                    qiwikey =  c.execute('SELECT * FROM qiwis',).fetchall()
                    c.execute('INSERT INTO pays VALUES(?,?,?,?)',(message.from_user.id, 'TradeBot', comment, '0'))
                qiwirand = random.choice(qiwikey)
                qiwiiii = qiwirand[1]
                loh = InlineKeyboardMarkup(
                    inline_keyboard = [
                        [
                            InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data=f'popolnyda,{message.from_user.id},{price},trade,{comment}')
                        ]
                    ]
                )
                p2p = QiwiP2P(auth_key=qiwiiii)
                new_bill = p2p.bill(bill_id=comment,amount=price,lifetime=45,comment=comment)
                pay_kb = types.InlineKeyboardMarkup()
                pay_kb.add(types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–∏—Ç–µ', url=new_bill.pay_url))
                pay_kb.add(types.InlineKeyboardButton(text = '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f"check,{comment},{price}"))
                pay_kb.add(types.InlineKeyboardButton(text = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data="cancel"))
                timetime = date.today() + timedelta(days=7)
                await workerbot.send_message(info[0], f'–ú–∞–º–æ–Ω—Ç: {message.from_user.full_name} @{message.from_user.username}\nID: {message.from_user.id}\n–•–æ—á–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å {message.text} RUB', reply_markup=loh)
                await bot.send_photo(message.from_user.id, photo=config.my_aktive, caption=f'‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ QIWI: <a href="{new_bill.pay_url}"> <b>–û–ü–õ–ê–¢–ê</b></a>\n\n–°—É–º–º–∞: {price} RUB\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>\n\n<i>‚ö†Ô∏è –í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.\n–ë–æ—Ç –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –í–∞—Å –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –ø–æ–∫–∞ –Ω–µ –≤—ã –Ω–µ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏–ª–∏ –Ω–µ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!</i>', reply_markup=pay_kb, parse_mode='HTML')
                await statess.Pays.q1.set()
                async with state.proxy() as data:
                    data['secret'] = qiwiiii
            except:
                await message.answer(f'<b>–ü—Ä–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>')
    else:
        await message.answer("<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>") 
        await state.finish()

@dp.callback_query_handler(text_startswith="check", state=statess.Pays.q1) 
async def check_pay(call:types.CallbackQuery,state:FSMContext):
    data = await state.get_data()
    comment,price = call.data.split(",")[1], call.data.split(",")[2]
    qiwinah = data['secret']
    with sqlite3.connect(bd) as c:
        qiwi = c.execute('SELECT * FROM qiwis WHERE p2p_secret = ?',(qiwinah,)).fetchone()
        payed = c.execute('SELECT * FROM pays WHERE comment = ?',(comment,)).fetchone()
    check = await pays(qiwi[1],comment)
    comission = int(0.70 * int(price))
    if payed[3] == 1:
        await call.message.edit_text(f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')
        await state.finish()
    else:
        if check:
            with sqlite3.connect(bd) as c:
                ref = c.execute('SELECT referal FROM mamonts_trade WHERE id = ?',(call.from_user.id,)).fetchone()
            for id_ref in ref:
                with sqlite3.connect(bd) as c:
                    info = c.execute('SELECT * FROM workers WHERE ref_code = ?',(id_ref,)).fetchone()
                    c.execute('UPDATE workers SET profit = profit + ? WHERE ref_code = ?',(price, id_ref,))
                    c.execute('UPDATE pays SET status = ? WHERE comment = ?',('1',comment,))
                    c.execute('UPDATE stat SET all_pay = all_pay + ?, all_profit = all_profit + ? WHERE nice = ?',('1', '1', '777',))
                if int(price) > 2500:
                    await workerbot.send_message(canal,f'''
                    <b>‚ùÑÔ∏è –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞</b>
                    
<b>üí∏ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {comission} RUB | 80%
üè¶ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {price} RUB
                    
üßë‚Äçüíª –í–æ—Ä–∫–µ—Ä: {info[1]}
üî≠ –°–µ—Ä–≤–∏—Å: –¢—Ä–µ–π–¥ üìä</b>''')
                    await workerbot.send_sticker(config.LOG_CHANNEL, sticker=r"CAACAgIAAxkBAAEHgElj1np8EB4dgePrpzgoWxXg_zGEVwACXCYAAl0ksUm6pu4WHs8QTC0E")
                    await workerbot.send_message(config.LOG_CHANNEL,f'''
                    <b>‚ùÑÔ∏è –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞</b>
                    
<b>üí∏ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {comission} RUB | 80%
üè¶ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {price} RUB
                    
üßë‚Äçüíª –í–æ—Ä–∫–µ—Ä: {info[1]}
üî≠ –°–µ—Ä–≤–∏—Å: –¢—Ä–µ–π–¥ üìä</b>''')
                else:
                    await workerbot.send_message(canal,f'''
                    <b>‚ùÑÔ∏è –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞</b>
                    
<b>üí∏ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {comission} RUB | 80%
üè¶ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {price} RUB
                    
üßë‚Äçüíª –í–æ—Ä–∫–µ—Ä: {info[1]}
üî≠ –°–µ—Ä–≤–∏—Å: –¢—Ä–µ–π–¥ üìä</b>''')
                    await workerbot.send_message(config.LOG_CHANNEL,f'''
                    <b>‚ùÑÔ∏è –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞</b>
                    
<b>üí∏ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {comission} RUB | 80%
üè¶ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {price} RUB
                    
üßë‚Äçüíª –í–æ—Ä–∫–µ—Ä: {info[1]}
üî≠ –°–µ—Ä–≤–∏—Å: –¢—Ä–µ–π–¥ üìä</b>''')
                if int(info[11]) == 1:
                    kur = int(0.30 * int(price))
                    newdolya = int(comission - int(kur))
                    await workerbot.send_message(TC_group, f'<b>–ö—É—Ä–∞—Ç–æ—Ä –¥–æ–≤–µ–ª —á–µ–ª–∞ –¥–æ –¥–µ–ø–∞.\n\n{kur} RUB - –¥–æ–ª–≥ –∫—É—Ä–∞—Ç–æ—Ä—É!</b>', parse_mode='HTML')
                    await workerbot.send_message(canal, f'''
            <b>‚ùÑÔ∏è –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞</b>
            
<b>üí∏ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {newdolya} RUB | 50%
üè¶ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {price} RUB
üéì –î–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞: {kur} RUB | 30% 

üßë‚Äçüíª –í–æ—Ä–∫–µ—Ä: {info[1]}
üî≠ –°–µ—Ä–≤–∏—Å: –¢—Ä–µ–π–¥ üìä</b>''')
                    await workerbot.send_message(config.LOG_CHANNEL, f'''
            <b>‚ùÑÔ∏è –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞</b>
            
<b>üí∏ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {newdolya} RUB | 50%
üè¶ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {price} RUB
üéì –î–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞: {kur} RUB | 30%

üßë‚Äçüíª –í–æ—Ä–∫–µ—Ä: {info[1]}
üî≠ –°–µ—Ä–≤–∏—Å: –¢—Ä–µ–π–¥ üìä</b>''')
                await call.message.edit_text(f'‚úÖ –£—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{price}</b>')
                try:
                    await workerbot.send_message(info[0], f'–û—Ç–ª–∏—á–Ω–æ, –º–∞–º–æ–Ω—Ç –ø–æ–ø–æ–ª–Ω–∏–ª –Ω–∞ —Å—É–º–º—É {price} RUB')
                except:
                    pass
                await state.finish()
        else:
            await call.message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

async def pays(secretka,comment):
    all_head = {"Authorization": f"Bearer {secretka}", "Accept": "application/json"}
    req = requests.get(f'https://api.qiwi.com/partner/bill/v1/bills/{comment}', headers=all_head).json()
    try:
        if req['status']['value'] == 'PAID':
            return True
        else:
            return False
    except:
        return False

@dp.callback_query_handler(text_startswith="p2pcard")
async def process_callback_button1(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id, 'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 15000 ‚ÇΩ')
    await statess.P2PCard.q1.set()

@dp.callback_query_handler(lambda c: c.data == 'vivod')
async def process_callback_button1(callback_query: types.CallbackQuery, state: FSMContext):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {callback_query.from_user.id}').fetchone()
    if info[11] == 0:
        if info[3] <= 1000:
            await bot.send_message(callback_query.from_user.id, f'‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 1000 ‚ÇΩ\nüí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: {info[3]} ‚ÇΩ, –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ!')
        else:
            await bot.send_message(callback_query.from_user.id, f'<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ +</b>\n–ü—Ä–∏–º–µ—Ä: <i>79042345678</i>')
            await statess.Vivod.q1.set()
    else:
        await bot.send_message(callback_query.from_user.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É üëá", reply_markup=menu.tp)

@dp.message_handler(state=statess.Vivod.q1)
async def spammers(message: types.Message,state:FSMContext):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {message.from_user.id}').fetchone()
        ref = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(message.from_user.id,)).fetchone()
        worker = c.execute('SELECT * FROM workers WHERE ref_code = ?',(ref[2],)).fetchone()
    loh = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text='‚úÖ', callback_data=f'gobalanc,{message.from_user.id},trade'),
                InlineKeyboardButton(text='‚ùå', callback_data=f'netbalanc,{message.from_user.id},{info[3]},trade')
            ]
        ]
    )        
    if message.text.isdigit():
        if int(message.text) == worker[2]:
            await message.answer(f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç.')
            await workerbot.send_message(worker[0], f'<b>üåê –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤!</b> (–¢—Ä–µ–π–¥)\n\nüêò –ú–∞–º–æ–Ω—Ç: <b>{message.from_user.first_name}</b>\nüí∏ –°—É–º–º–∞: <b>{ref[3]}</b> RUB\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{message.text}</b>', reply_markup=loh)
            with sqlite3.connect(bd) as c:
                c.execute("UPDATE mamonts_trade SET balance = 0 WHERE id = ?", (message.from_user.id,))
            await state.finish()
        elif int(message.text) == worker[7]:
            await message.answer(f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç.')
            await workerbot.send_message(worker[0], f'<b>üåê –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤!</b> (–¢—Ä–µ–π–¥)\n\nüêò –ú–∞–º–æ–Ω—Ç: <b>{message.from_user.first_name}</b>\nüí∏ –°—É–º–º–∞: <b>{ref[3]}</b> RUB\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{message.text}</b>', reply_markup=loh)
            with sqlite3.connect(bd) as c:
                c.execute("UPDATE mamonts_trade SET balance = 0 WHERE id = ?", (message.from_user.id,)) 
            await state.finish()
        else:
            await message.answer(f'‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –±–∞–ª–∞–Ω—Å.')
            await workerbot.send_message(worker[0], f'–ú–∞–º–æ–Ω—Ç: <b>{message.from_user.first_name} (–¢—Ä–µ–π–¥)</b> –ø—ã—Ç–∞–ª—Å—è –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{message.text}</b>')
    else:
        await message.answer("<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>")
    await state.finish()

@dp.callback_query_handler(text="bitcoin")
async def bitcoin_btn(call: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        cryptos = ["BTC"]
        tasks = [fetch_price(session, crypto) for crypto in cryptos]
        results = await asyncio.gather(*tasks)
        for result in results:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
            if info[10] == 0:
                text = f'''
            üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
            
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {result}$
            
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info[3]} RUB'''
                with open('Trade/photo/bitcoin.jpg', 'rb') as photo:
                    await bot.send_photo(call.from_user.id, photo, text, parse_mode='HTML', reply_markup=menu.btc)
                    await statess.BTCtrade.q1.set()
            else:
                text2 = f'''
                <b>‚ö†Ô∏è –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>
                
<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>'''
                await bot.send_message(text=text2, reply_markup=menu.tp, parse_mode='HTML')

@dp.callback_query_handler(text="ethereum")
async def ethereum_btn(call: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        cryptos = ["ETH"]
        tasks = [fetch_price(session, crypto) for crypto in cryptos]
        results = await asyncio.gather(*tasks)
        for result in results:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
            if info[10] == 0:
                text = f'''
            üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
            
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {result}$
            
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info[3]} RUB'''
                with open('Trade/photo/ethn.jpg', 'rb') as photo:
                    await bot.send_photo(call.from_user.id, photo, text, parse_mode='HTML', reply_markup=menu.eth)
                    await statess.ETH.q1.set()
            else:
                text2 = f'''
                <b>‚ö†Ô∏è –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>
                
<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>'''
                await bot.send_message(text=text2, reply_markup=menu.tp, parse_mode='HTML')

@dp.callback_query_handler(text="polkadot")
async def polkadot_btn(call: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        cryptos = ["DOT"]
        tasks = [fetch_price(session, crypto) for crypto in cryptos]
        results = await asyncio.gather(*tasks)
        for result in results:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
            if info[10] == 0:
                text = f'''
            üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
            
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {result}$
            
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info[3]} RUB'''
                with open('Trade/photo/polkadot.jpg', 'rb') as photo:
                    await bot.send_photo(call.from_user.id, photo, text, parse_mode='HTML', reply_markup=menu.dots)
                    await statess.DOT.q1.set()
            else:
                text2 = f'''
                <b>‚ö†Ô∏è –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>
                
<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>'''
                await bot.send_message(text=text2, reply_markup=menu.tp, parse_mode='HTML')

@dp.callback_query_handler(text="doge")
async def doge_btn(call: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        cryptos = ["DOGE"]
        tasks = [fetch_price(session, crypto) for crypto in cryptos]
        results = await asyncio.gather(*tasks)
        for result in results:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
            if info[10] == 0:
                text = f'''
            üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
            
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {result}$
            
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info[3]} RUB'''
                with open('Trade/photo/dogecoin.jpg', 'rb') as photo:
                    await bot.send_photo(call.from_user.id, photo, text, parse_mode='HTML', reply_markup=menu.dogec)
                    await statess.DOGE.q1.set()
            else:
                text2 = f'''
                <b>‚ö†Ô∏è –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>
                
<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>'''
                await bot.send_message(text=text2, reply_markup=menu.tp, parse_mode='HTML')

@dp.callback_query_handler(text="ripple")
async def ripple_btn(call: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        cryptos = ["XRP"]
        tasks = [fetch_price(session, crypto) for crypto in cryptos]
        results = await asyncio.gather(*tasks)
        for result in results:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
            if info[10] == 0:
                text = f'''
            üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
            
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {result}$
            
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info[3]} RUB'''
                with open('Trade/photo/ripple.jpg', 'rb') as photo:
                    await bot.send_photo(call.from_user.id, photo, text, parse_mode='HTML', reply_markup=menu.ripples)
                    await statess.RIPPLE.q1.set()
            else:
                text2 = f'''
                <b>‚ö†Ô∏è –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>
                
<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>'''
                await bot.send_message(text=text2, reply_markup=menu.tp, parse_mode='HTML')

@dp.callback_query_handler(text="terra")
async def terra_btn(call: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        cryptos = ["LUNA"]
        tasks = [fetch_price(session, crypto) for crypto in cryptos]
        results = await asyncio.gather(*tasks)
        for result in results:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
            if info[10] == 0:
                text = f'''
            üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
            
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {result}$
            
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info[3]} RUB'''
                with open('Trade/photo/terra.jpg', 'rb') as photo:
                    await bot.send_photo(call.from_user.id, photo, text, parse_mode='HTML', reply_markup=menu.luna)
                    await statess.LUNA.q1.set()
            else:
                text2 = f'''
                <b>‚ö†Ô∏è –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>
                
<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>'''
                await bot.send_message(text=text2, reply_markup=menu.tp, parse_mode='HTML')

@dp.callback_query_handler(text="litecoin")
async def litecoin_btn(call: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        cryptos = ["LTC"]
        tasks = [fetch_price(session, crypto) for crypto in cryptos]
        results = await asyncio.gather(*tasks)
        for result in results:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
            if info[10] == 0:
                text = f'''
            üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
            
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {result}$
            
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info[3]} RUB'''
                with open('Trade/photo/litecoin.jpg', 'rb') as photo:
                    await bot.send_photo(call.from_user.id, photo, text, parse_mode='HTML', reply_markup=menu.lites)
                    await statess.LTC.q1.set()
            else:
                text2 = f'''
                <b>‚ö†Ô∏è –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>
                
<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>'''
                await bot.send_message(text=text2, reply_markup=menu.tp, parse_mode='HTML')

@dp.callback_query_handler(text="solana")
async def solana_btn(call: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        cryptos = ["SOL"]
        tasks = [fetch_price(session, crypto) for crypto in cryptos]
        results = await asyncio.gather(*tasks)
        for result in results:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
            if info[10] == 0:
                text = f'''
            üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
            
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {result}$
            
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info[3]} RUB'''
                with open('Trade/photo/solana.jpg', 'rb') as photo:
                    await bot.send_photo(call.from_user.id, photo, text, parse_mode='HTML', reply_markup=menu.sola)
                    await statess.SOL.q1.set()
            else:
                text2 = f'''
                <b>‚ö†Ô∏è –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>
                
<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>'''
                await bot.send_message(text=text2, reply_markup=menu.tp, parse_mode='HTML')

@dp.callback_query_handler(text="tron")
async def tron_btn(call: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        cryptos = ["TRX"]
        tasks = [fetch_price(session, crypto) for crypto in cryptos]
        results = await asyncio.gather(*tasks)
        for result in results:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
            if info[10] == 0:
                text = f'''
            üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
            
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {result}$
            
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info[3]} RUB'''
                with open('Trade/photo/tron.jpg', 'rb') as photo:
                    await bot.send_photo(call.from_user.id, photo, text, parse_mode='HTML', reply_markup=menu.trons)
                    await statess.TRX.q1.set()
            else:
                text2 = f'''
                <b>‚ö†Ô∏è –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>
                
<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>'''
                await bot.send_message(text=text2, reply_markup=menu.tp, parse_mode='HTML')

@dp.callback_query_handler(text="cardano")
async def cardano_btn(call: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        cryptos = ["ADA"]
        tasks = [fetch_price(session, crypto) for crypto in cryptos]
        results = await asyncio.gather(*tasks)
        for result in results:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
            if info[10] == 0:
                text = f'''
            üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
            
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {result}$
            
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info[3]} RUB'''
                with open('Trade/photo/cardano.jpg', 'rb') as photo:
                    await bot.send_photo(call.from_user.id, photo, text, parse_mode='HTML', reply_markup=menu.carda)
                    await statess.CARDANO.q1.set()
            else:
                text2 = f'''
                <b>‚ö†Ô∏è –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>
                
<i>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</i>'''
                await bot.send_message(text=text2, reply_markup=menu.tp, parse_mode='HTML')

@dp.message_handler(state=statess.BTCtrade.q1)
async def check_sum(message: types.Message, state: FSMContext):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {message.from_user.id}').fetchone()
    try:
        if message.text.isdigit():
            if 500 > int(message.text) or int(message.text) > info[3]:
                await message.answer("–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ \n"
                                 "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n\n"
                                 "<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500 RUB</b>", reply_markup=menu.otmena)
            else:
                await message.answer("üóØ –ö—É–¥–∞ –ø–æ–π–¥–µ—Ç –∫—É—Ä—Å –∞–∫—Ç–∏–≤–∞? \n\n"
                                 "üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: \n"
                                 "–í–≤–µ—Ä—Ö - x2 \n"
                                 "–í–Ω–∏–∑ - x2", reply_markup=await choose(int(message.text)))
        else:
            await message.answer("<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>")
    except ValueError:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
    await state.finish()

@dp.callback_query_handler(choose_callback.filter(direction="upbtc"))
async def up_btn(call: types.CallbackQuery, callback_data: dict):
    await result(call, int(callback_data.get("amount")), "–≤–≤–µ—Ä—Ö")

@dp.callback_query_handler(choose_callback.filter(direction="downbtc"))
async def down_btn(call: types.CallbackQuery, callback_data: dict):
    await result(call, int(callback_data.get("amount")), "–≤–Ω–∏–∑")

async def result(call: types.CallbackQuery, amount: int, direction: str):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {call.from_user.id}').fetchone()
        ref = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(call.from_user.id,)).fetchone()
        worker = c.execute('SELECT * FROM workers WHERE ref_code = ?',(ref[2],)).fetchone()
    if up_btn:
        async with aiohttp.ClientSession() as session:
            cryptos = ["BTC"]
            tasks = [fetch_price(session, crypto) for crypto in cryptos]
            results = await asyncio.gather(*tasks)
            for result in results:
                if info[5] == 100:
                    for i in range(1, 21):
                        await bot.edit_message_text(f"üè¶ BTC/USD\n\nüíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} RUB\nüìâ –ü—Ä–æ–≥–Ω–æ–∑: {direction}\n\n‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result} USD\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(float(result) + 9 * float(result) / 1000, 2)} USD\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{round(float(result) + random.randint(4, 10) * float(result) / 1000, 2) - float(result)} USD\n\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {20 - i}",call.message.chat.id, call.message.message_id)
                        await asyncio.sleep(1)
                    with sqlite3.connect(bd) as c:
                        c.execute("UPDATE mamonts_trade SET sdelok = sdelok + ? WHERE id = ?",('1', call.from_user.id,))
                        c.execute("UPDATE mamonts_trade SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
                    await call.message.answer(f'<b>üìâ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ {direction}\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {int(info[3]) + amount} RUB</b>', reply_markup=menu.otmena, parse_mode='HTML')
                    texts = f'''
                        <b>üìä –ú–∞–º–æ–Ω—Ç @{call.from_user.username} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É (–¢—Ä–µ–π–¥)
                        
üõ† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–≤–∫–∏:
                        
üíé –í–∞–ª—é—Ç–∞: BTC/USD
üí∏ –°—É–º–º–∞: {amount}
ü§î –ü—Ä–æ–≥–Ω–æ–∑: {direction}
‚úÖ –°—Ç–∞—Ç—É—Å: —É—Å–ø–µ—à–Ω–æ</b>
                        
<i>üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–º–æ–Ω—Ç—É:</i> /t{call.from_user.id}'''
                    await workerbot.send_message(worker[0], texts, parse_mode='HTML')
                elif info[5] == 50:
                    random_result = random.randint(1, 2)
                    print(random_result)
                    if random_result == 1:
                        for i in range(1, 21):
                            await bot.edit_message_text(f"üè¶ BTC/USD\n\nüíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} RUB\nüìâ –ü—Ä–æ–≥–Ω–æ–∑: {direction}\n\n‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result} USD\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(float(result) + 9 * float(result) / 1000, 2)} USD\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{round(float(result) + random.randint(4, 10) * float(result) / 1000, 2) - float(result)} USD\n\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {20 - i}",call.message.chat.id, call.message.message_id)
                            await asyncio.sleep(1)
                        with sqlite3.connect(bd) as c:
                            c.execute("UPDATE mamonts_trade SET sdelok = sdelok + ? WHERE id = ?",('1', call.from_user.id,))
                            c.execute("UPDATE mamonts_trade SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
                        await call.message.answer(f'<b>üìâ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ {direction}\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {int(info[3]) + amount} RUB</b>', reply_markup=menu.otmena, parse_mode='HTML')
                        texts2 = f'''
                        <b>üìä –ú–∞–º–æ–Ω—Ç @{call.from_user.username} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É (–¢—Ä–µ–π–¥)
                        
üõ† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–≤–∫–∏:
                        
üíé –í–∞–ª—é—Ç–∞: BTC/USD
üí∏ –°—É–º–º–∞: {amount}
ü§î –ü—Ä–æ–≥–Ω–æ–∑: {direction}
‚úÖ –°—Ç–∞—Ç—É—Å: —É—Å–ø–µ—à–Ω–æ</b>
                        
<i>üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–º–æ–Ω—Ç—É:</i> /t{call.from_user.id}'''
                        await workerbot.send_message(worker[0], texts2, parse_mode='HTML')
                    else:
                        for i in range(1, 21):
                            await bot.edit_message_text(f"üè¶ BTC/USD\n\nüíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} RUB\nüìâ –ü—Ä–æ–≥–Ω–æ–∑: {direction}\n\n‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(float(result) + 9 * float(result) / 1000, 2)} USD\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result} USD\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: -{round(float(result) + random.randint(4, 10) * float(result) / 1000, 2) - float(result)} USD\n\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {20 - i}",call.message.chat.id, call.message.message_id)
                            await asyncio.sleep(1)
                        with sqlite3.connect(bd) as c:
                            c.execute("UPDATE mamonts_trade SET sdelok = sdelok + ? WHERE id = ?",('1', call.from_user.id,))
                            c.execute("UPDATE mamonts_trade SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
                        await call.message.answer(f'<b>üìâ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ –≤–Ω–∏–∑\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑—É—Å–ø–µ—à–Ω–æ\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {int(info[3]) - amount}</b>', reply_markup=menu.otmena, parse_mode='HTML')
                        texts3 = f'''
                        <b>üìä –ú–∞–º–æ–Ω—Ç @{call.from_user.username} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É (–¢—Ä–µ–π–¥)
                        
üõ† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–≤–∫–∏:
                        
üíé –í–∞–ª—é—Ç–∞: BTC/USD
üí∏ –°—É–º–º–∞: {amount}
ü§î –ü—Ä–æ–≥–Ω–æ–∑: {direction}
‚ùå –°—Ç–∞—Ç—É—Å: –±–µ–∑—É—Å–ø–µ—à–Ω–æ</b>
                        
<i>üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–º–æ–Ω—Ç—É:</i> /t{call.from_user.id}'''
                        await workerbot.send_message(worker[0], texts3, parse_mode='HTML')
                else:
                    for i in range(1, 21):
                            await bot.edit_message_text(f"üè¶ BTC/USD\n\nüíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} RUB\nüìâ –ü—Ä–æ–≥–Ω–æ–∑: {direction}\n\n‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(float(result) + 9 * float(result) / 1000, 2) + float(result)} USD\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result} USD\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: -{round(float(result) + random.randint(4, 10) * float(result) / 1000, 2) - float(result)} USD\n\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {20 - i}",call.message.chat.id, call.message.message_id)
                            await asyncio.sleep(1)
                    with sqlite3.connect(bd) as c:
                        c.execute("UPDATE mamonts_trade SET sdelok = sdelok + ? WHERE id = ?",('1', call.from_user.id,))
                        c.execute("UPDATE mamonts_trade SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
                    await call.message.answer(f'<b>üìâ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ –≤–Ω–∏–∑\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑—É—Å–ø–µ—à–Ω–æ\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {int(info[3]) - amount}</b>', reply_markup=menu.otmena, parse_mode='HTML')
                    texts4 = f'''
                        <b>üìä –ú–∞–º–æ–Ω—Ç @{call.from_user.username} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É (–¢—Ä–µ–π–¥)
                        
üõ† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–≤–∫–∏:
                        
üíé –í–∞–ª—é—Ç–∞: BTC/USD
üí∏ –°—É–º–º–∞: {amount}
ü§î –ü—Ä–æ–≥–Ω–æ–∑: {direction}
‚ùå –°—Ç–∞—Ç—É—Å: –±–µ–∑—É—Å–ø–µ—à–Ω–æ</b>
                        
<i>üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–º–æ–Ω—Ç—É:</i> /t{call.from_user.id}'''
                    await workerbot.send_message(worker[0], texts4, parse_mode='HTML')
                await statess.BTCtrade.q1.set()
    elif down_btn:
        async with aiohttp.ClientSession() as session:
            cryptos = ["BTC"]
            tasks = [fetch_price(session, crypto) for crypto in cryptos]
            results = await asyncio.gather(*tasks)
            for result in results:
                if info[5] == 100:
                    for i in range(1, 21):
                        await bot.edit_message_text(f"üè¶ BTC/USD\n\nüíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} RUB\nüìâ –ü—Ä–æ–≥–Ω–æ–∑: {direction}\n\n‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result} USD\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(float(result) - 9 * float(result) / 1000, 2) - float(result)} USD\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: -{round(float(result) + random.randint(4, 10) * float(result) / 1000, 2) - float(result)} USD\n\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {20 - i}",call.message.chat.id, call.message.message_id)
                        await asyncio.sleep(1)
                    with sqlite3.connect(bd) as c:
                        c.execute("UPDATE mamonts_trade SET sdelok = sdelok + ? WHERE id = ?",('1', call.from_user.id,))
                        c.execute("UPDATE mamonts_trade SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
                    await call.message.answer(f'<b>üìâ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ {direction}\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {int(info[3]) + amount} RUB</b>', reply_markup=menu.otmena, parse_mode='HTML')
                    texts5 = f'''
                        <b>üìä –ú–∞–º–æ–Ω—Ç @{call.from_user.username} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É (–¢—Ä–µ–π–¥)
                        
üõ† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–≤–∫–∏:
                        
üíé –í–∞–ª—é—Ç–∞: BTC/USD
üí∏ –°—É–º–º–∞: {amount}
ü§î –ü—Ä–æ–≥–Ω–æ–∑: {direction}
‚úÖ –°—Ç–∞—Ç—É—Å: —É—Å–ø–µ—à–Ω–æ</b>
                        
<i>üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–º–æ–Ω—Ç—É:</i> /t{call.from_user.id}'''
                    await workerbot.send_message(worker[0], texts5, parse_mode='HTML')
                elif info[5] == 50:
                    random_result = random.randint(1, 2)
                    print(random_result)
                    if random_result == 1:
                        for i in range(1, 21):
                            await bot.edit_message_text(f"üè¶ BTC/USD\n\nüíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} RUB\nüìâ –ü—Ä–æ–≥–Ω–æ–∑: {direction}\n\n‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result} USD\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(float(result) - 9 * float(result) / 1000, 2) - float(result)} USD\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: -{round(float(result) + random.randint(4, 10) * float(result) / 1000, 2) - float(result)} USD\n\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {20 - i}",call.message.chat.id, call.message.message_id)
                            await asyncio.sleep(1)
                        with sqlite3.connect(bd) as c:
                            c.execute("UPDATE mamonts_trade SET sdelok = sdelok + ? WHERE id = ?",('1', call.from_user.id,))
                            c.execute("UPDATE mamonts_trade SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
                        await call.message.answer(f'<b>üìâ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ {direction}\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {int(info[3]) + amount} RUB</b>', reply_markup=menu.otmena, parse_mode='HTML')
                        texts6 = f'''
                        <b>üìä –ú–∞–º–æ–Ω—Ç @{call.from_user.username} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É (–¢—Ä–µ–π–¥)
                        
üõ† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–≤–∫–∏:
                        
üíé –í–∞–ª—é—Ç–∞: BTC/USD
üí∏ –°—É–º–º–∞: {amount}
ü§î –ü—Ä–æ–≥–Ω–æ–∑: {direction}
‚úÖ –°—Ç–∞—Ç—É—Å: —É—Å–ø–µ—à–Ω–æ</b>
                        
<i>üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–º–æ–Ω—Ç—É:</i> /t{call.from_user.id}'''
                        await workerbot.send_message(worker[0], texts6, parse_mode='HTML')
                    else:
                        for i in range(1, 21):
                            await bot.edit_message_text(f"üè¶ BTC/USD\n\nüíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} RUB\nüìâ –ü—Ä–æ–≥–Ω–æ–∑: {direction}\n\n‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(float(result) + 9 * float(result) / 1000, 2)} USD\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result} USD\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{round(float(result) - random.randint(4, 10) * float(result) / 1000, 2) - float(result)} USD\n\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {20 - i}",call.message.chat.id, call.message.message_id)
                            await asyncio.sleep(1)
                        with sqlite3.connect(bd) as c:
                            c.execute("UPDATE mamonts_trade SET sdelok = sdelok + ? WHERE id = ?",('1', call.from_user.id,))
                            c.execute("UPDATE mamonts_trade SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
                        await call.message.answer(f'<b>üìâ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ –≤–≤–µ—Ä—Ö\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑—É—Å–ø–µ—à–Ω–æ\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {int(info[3]) - amount}</b>', reply_markup=menu.otmena, parse_mode='HTML')
                        texts7 = f'''
                        <b>üìä –ú–∞–º–æ–Ω—Ç @{call.from_user.username} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É (–¢—Ä–µ–π–¥)
                        
üõ† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–≤–∫–∏:
                        
üíé –í–∞–ª—é—Ç–∞: BTC/USD
üí∏ –°—É–º–º–∞: {amount}
ü§î –ü—Ä–æ–≥–Ω–æ–∑: {direction}
‚ùå –°—Ç–∞—Ç—É—Å: –±–µ–∑—É—Å–ø–µ—à–Ω–æ</b>
                        
<i>üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–º–æ–Ω—Ç—É:</i> /t{call.from_user.id}'''
                        await workerbot.send_message(worker[0], texts7, parse_mode='HTML')
                else:
                    for i in range(1, 21):
                        await bot.edit_message_text(f"üè¶ BTC/USD\n\nüíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} RUB\nüìâ –ü—Ä–æ–≥–Ω–æ–∑: {direction}\n\n‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(float(result) + 9 * float(result) / 1000, 2)} USD\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result} USD\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{round(float(result) - random.randint(4, 10) * float(result) / 1000, 2) - float(result)} USD\n\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {20 - i}",call.message.chat.id, call.message.message_id)
                        await asyncio.sleep(1)
                    with sqlite3.connect(bd) as c:
                        c.execute("UPDATE mamonts_trade SET sdelok = sdelok + ? WHERE id = ?",('1', call.from_user.id,))
                        c.execute("UPDATE mamonts_trade SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
                    await call.message.answer(f'<b>üìâ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ –≤–≤–µ—Ä—Ö\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑—É—Å–ø–µ—à–Ω–æ\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {int(info[3]) - amount}</b>', reply_markup=menu.otmena, parse_mode='HTML')
                    texts8 = f'''
                        <b>üìä –ú–∞–º–æ–Ω—Ç @{call.from_user.username} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É (–¢—Ä–µ–π–¥)
                        
üõ† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–≤–∫–∏:
                        
üíé –í–∞–ª—é—Ç–∞: BTC/USD
üí∏ –°—É–º–º–∞: {amount}
ü§î –ü—Ä–æ–≥–Ω–æ–∑: {direction}
‚ùå –°—Ç–∞—Ç—É—Å: –±–µ–∑—É—Å–ø–µ—à–Ω–æ</b>
                        
<i>üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–º–æ–Ω—Ç—É:</i> /t{call.from_user.id}'''
                    await workerbot.send_message(worker[0], texts8, parse_mode='HTML')
                await statess.BTCtrade.q1.set()


@dp.callback_query_handler(text="cancel", state="*")
async def cancel_btn(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=menu.mainkb)

executor.start_polling(dp)