#import telebot
import threading
from glob import glob
from tabnanny import verbose
import telebot
from telebot import types
import time
from time import sleep
#import file
from config import *
#import random
import random
from random import randint
#import module db
import sqlite3
import re
import string
import subprocess
import sys
import os

#course
from pycoingecko import CoinGeckoAPI

bot = telebot.TeleBot(token, parse_mode="HTML")
print("BOT START")
api = CoinGeckoAPI()
print("API START")

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
photo_path = os.path.join(BASE_DIR, 'startPhoto.jpg')
card_ru_path = os.path.join(BASE_DIR, 'cardRU.txt')
card_ua_path = os.path.join(BASE_DIR, 'cardUA.txt')
crypto_photo_path = os.path.join(BASE_DIR, 'crypto.jpg')
about_file_path = os.path.join(BASE_DIR, 'about.txt')

def read_file_content(file_path):
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"

def send_photo_safe(chat_id, file_path, caption):
    if os.path.exists(file_path):
        with open(file_path, 'rb') as photo:
            bot.send_photo(chat_id, photo, caption=caption)
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@bot.message_handler(commands=["start", "menu"])
def start(message):
    db = sqlite3.connect(os.path.join(BASE_DIR, 'users.db'))
    sql = db.cursor()
    sql.execute("""
        CREATE TABLE IF NOT EXISTS users(
            id INTEGER,
            username TEXT,
            cash BIGINT,
            verif BOOL,
            sdelka INTEGER,
            luck INTEGER,
            val TEXT,
            mindep INTEGER
        )
    """)
    db.commit()
    sql.execute("""CREATE TABLE IF NOT EXISTS valute( 
        valute TEXT,
        stat BOOL
        )""")
    db.commit()
    sql.execute(f"SELECT valute FROM valute")
    data = sql.fetchone()
    if data is None:
        print("Create new table val")
        sql.execute(f"INSERT OR IGNORE INTO valute (valute, stat) VALUES('UAH','True');")
        db.commit()
    print(f"{message.chat.id} conected to db")
    sql.execute("""CREATE TABLE IF NOT EXISTS promo( 
        id INTEGER,
        prom TEXT,
        sum INTAGER
        )""")
    db.commit()
    sql.execute(f"SELECT id FROM promo")
    data = sql.fetchone()
    if data is None:
        print("Create new table promo")
        sql.execute(f"INSERT OR IGNORE INTO promo (id,prom, sum) VALUES({0},'0',{0});")
        db.commit()

    people_id = message.chat.id
    username = message.from_user.username
    sql.execute(f"SELECT id FROM users WHERE id = {people_id}")
    data = sql.fetchone()
    if data is None:
        sql.execute(f"INSERT OR IGNORE INTO users VALUES('{people_id}', '{username}', {0}, 'False', {0}, {0},'{0}', {500});")
        bot.send_message(chatAlert, f"üéØ<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞</b>")

        db.commit() 
        print(f"{message.chat.id} –Ω–æ–≤—ã–π —é–∑–µ—Ä")
    sql.execute(f"SELECT * FROM users WHERE id = {people_id}")
    excepts = sql.fetchone()
    print(excepts)
    if excepts[6] == '0': 
        sql.execute("SELECT * FROM valute WHERE stat = 'True' ")
        datV = sql.fetchall()
        markups = types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        for i in datV:
            button = types.InlineKeyboardButton(text= str(i[0]), callback_data = f"newwal_{i[0]}")
            buttons.append(button)
        markups.add(*buttons)
        bot.send_message(message.chat.id, "<b>üí±–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –≤–∞–ª—é—Ç—É</b>",reply_markup=markups)
    
    
    else:
        t = "‚ùå"
        if excepts[3] == 'False':
            t = "‚ùå"
        if excepts[3] == 'True':
            t = "‚úÖ"
        activity_user = random.randint(340,720)
        markup = types.InlineKeyboardMarkup(row_width = 2)
        but = types.InlineKeyboardButton("üìàECN —Å—á—ë—Ç", callback_data="inv")
        but1 = types.InlineKeyboardButton("üí∞–ö–æ—à–µ–ª–µ–∫", callback_data="wallet")
        but2 = types.InlineKeyboardButton("‚ùìinfo", callback_data="info")
        but3 = types.InlineKeyboardButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setings")
        but4 = types.InlineKeyboardButton("üõ†–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{support}")
        markup.add(but,but1,but2,but3,but4)   
        markups = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        menu = types.KeyboardButton("üñ±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markups.add(menu)  
        bot.send_message(message.chat.id, "<b>üñ±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",reply_markup=markups)

        bot.send_photo(
            message.chat.id,
            open(os.path.abspath('startPhoto.jpg'), 'rb'),
            caption=f"üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\nüó£–ò–º—è: {message.from_user.first_name}\nü¶æ–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {t}\nü§ù–°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {excepts[4]}\nüè¶–ë–∞–ª–∞–Ω—Å {excepts[2]} {excepts[6]}\nüßëüèª‚Äçüíª–¢—Ä–µ–π–¥–µ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω: {activity_user}",
            reply_markup=markup
        )
    #referals
    referal = message.text.split(' ')[-1]
    db = sqlite3.connect('users.db')
    sql = db.cursor()
    sql.execute("""CREATE TABLE IF NOT EXISTS worker( 
        idW INTEGER,
        refid INTEGER,
        refusernames TEXT,
        refcash INTAGER,
        refverif BOOL,
        refsdelka INTAGER,
        refluck INTAGER,
        mindep INTAGER

        )""")
    db.commit() 
    sql.execute(f"SELECT refid FROM worker WHERE refid = {message.chat.id}")
    data = sql.fetchone()
    if data is None:
        print("Create new users")
        sql.execute(f"INSERT OR IGNORE INTO worker (idW, refid, refusernames, refcash, refverif, refsdelka, refluck, mindep) VALUES({0}, {0}, '{0}' ,{0}, '0', {0}, {0}, {500});")
        print(referal)
        db.commit() 

    if referal != '/start': 
        db = sqlite3.connect('users.db')
        sql = db.cursor()
        db.commit()
        sql.execute(f"SELECT refid FROM worker WHERE refid = {message.chat.id}")
        dats = sql.fetchone()
        if dats is None:
            sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
            exts = sql.fetchone()
            sql.execute(f"INSERT OR IGNORE INTO worker (idW,refid,refusernames,refcash,refverif,refsdelka,refluck) VALUES ('{referal}',{message.chat.id}, '{message.from_user.username}' ,{exts[2]}, '{exts[3]}', {exts[4]},{exts[5]});")
            print(referal)
            print(message.chat.id)
            print(exts[3])
            db.commit()
            sql.execute(f"SELECT username FROM users WHERE id = {message.chat.id}")
            data = sql.fetchone()
            bot.send_message(referal, f"‚ûï –ù–æ–≤—ã–π —Ä–µ—Ñ–∏—Ä–∞–ª –∑–∞—à–µ–ª: @{message.from_user.username}\nüè°–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞: /{message.chat.id}")
            bot.send_message(chatAlert, f"üëª<b>–†–µ—Ñ–µ—Ä–∞–ª {message.from_user.username} –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞\nüë§–í–æ—Ä–∫–µ—Ä: @{data[0]}</b>")
        else: 
            bot.send_message(message.chat.id,"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    





def depositSumData(message):
    db = sqlite3.connect(os.path.join(BASE_DIR, 'users.db'))
    sql = db.cursor()
    sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
    datatU = sql.fetchone()
    dep = int(message.text)
    if dep < datatU[7]:
        bot.send_message(message.chat.id, f"‚ùï–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç {datatU[7]} {datatU[6]}</b>")
    if dep == datatU[7]:
        bot.send_message(message.chat.id,f"‚ùï<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç {datatU[7]} {datatU[6]}</b>")
    if dep >= datatU[7]:
        if datas is None:
            if datatU[6] == 'RUB':
                cardW = open("cardRU.txt", "r")
                card = cardW.read()
                cardW.close()
                markup = types.InlineKeyboardMarkup(row_width = 2)
                but = types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"YesDep_{dep}")
                markup.add(but)
                bot.send_photo(message.chat.id, open('CardPhoto.jpg', 'rb'), f"<b>ü§µ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã : <code>{card}</code>\nüí∏–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {dep} RUB\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : t{message.chat.id}\n\n‚ö†Ô∏è–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!\n\n‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –∂–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n‚ö†Ô∏è üõ† –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - @{support}</b>",reply_markup=markup)        
                bot.send_message(chatAlert, f"<b>üîî –ú–∞–º–æ–Ω—Ç @{message.from_user.username} –Ω–∞ –º–æ–º–µ–Ω—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n–°—É–º–º–∞: {dep} RUB</b>")
            if datatU[6] == 'UAH':
                cardW = open("cardUA.txt", "r")
                card = cardW.read()
                cardW.close()
                markup = types.InlineKeyboardMarkup(row_width = 2)
                but = types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"YesDep_{dep}")
                markup.add(but)
                bot.send_photo(message.chat.id, open('CardPhoto.jpg', 'rb'), f"<b>ü§µ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã : <code>{card}</code>\nüí∏–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {dep} UAH\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : t{message.chat.id}\n\n‚ö†Ô∏è–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!\n\n‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –∂–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n‚ö†Ô∏è üõ† –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - @{support}</b>",reply_markup=markup)        
                bot.send_message(chatAlert, f"<b>üîî –ú–∞–º–æ–Ω—Ç @{message.from_user.username} –Ω–∞ –º–æ–º–µ–Ω—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n–°—É–º–º–∞: {dep} UAH</b>")
        else:
            if datatU[6] == 'RUB':
                idWork = datas[0]
                print(datas[0])
                cardW = open("cardRU.txt", "r")
                card = cardW.read()
                cardW.close()
                markup = types.InlineKeyboardMarkup(row_width = 2)
                but = types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"YesDep_{dep}")
                markup.add(but)
                bot.send_message(idWork, f"‚ùï<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞–º–æ–Ω—Ç—É: @{datas[2]}</b>\nüîÖ<i>–ú–∞–º–æ–Ω—Ç –∑–∞—à–µ–ª –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!</i>")
                bot.send_photo(message.chat.id, open('CardPhoto.jpg', 'rb'), f"<b>ü§µ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã : <code>{card}</code>\nüí∏–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {dep} RUB\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : t{message.chat.id}\n\n‚ö†Ô∏è–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!\n\n‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –∂–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n‚ö†Ô∏è üõ† –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - @{support}</b>",reply_markup=markup)        
                bot.send_message(chatAlert, f"<b>üîî –ú–∞–º–æ–Ω—Ç @{message.from_user.username} –Ω–∞ –º–æ–º–µ–Ω—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n–°—É–º–º–∞: {dep} RUB</b>")
            if datatU[6] == 'UAH':
                idWork = datas[0]
                print(datas[0])
                cardW = open("cardUA.txt", "r")
                card = cardW.read()
                cardW.close()
                markup = types.InlineKeyboardMarkup(row_width = 2)
                but = types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"YesDep_{dep}")
                markup.add(but)
                bot.send_message(idWork, f"‚ùï<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞–º–æ–Ω—Ç—É: @{datas[2]}</b>\nüîÖ<i>–ú–∞–º–æ–Ω—Ç –∑–∞—à–µ–ª –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!</i>")
                bot.send_photo(message.chat.id, open('CardPhoto.jpg', 'rb'), f"<b>ü§µ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã : <code>{card}</code>\nüí∏–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {dep} UAH\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : t{message.chat.id}\n\n‚ö†Ô∏è–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!\n\n‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –∂–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n‚ö†Ô∏è üõ† –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - @{support}</b>",reply_markup=markup)        
                bot.send_message(chatAlert, f"<b>üîî –ú–∞–º–æ–Ω—Ç @{message.from_user.username} –Ω–∞ –º–æ–º–µ–Ω—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n–°—É–º–º–∞: {dep} UAH</b>")



@bot.message_handler(commands=["coder"])
def coder(message):
    db = sqlite3.connect('users.db')
    sql = db.cursor()
    markup = types.InlineKeyboardMarkup(row_width = 2)
    but = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å–ë–î", callback_data="cleardb")
    but1 = types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞–º", callback_data="alertWork")
    markup.add(but,but1)
    bot.send_message(message.chat.id,"–ö–æ–¥–µ—Ä –ø–∞–Ω–µ–ª—å!",reply_markup=markup)

def alertW(message):
    msg = message.text
    bot.send_message(chatPay, f"<b>{msg}</b>")
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")
@bot.message_handler(commands=["admin"])
def admin(message):
    if message.chat.id in admins:
        markup = types.InlineKeyboardMarkup(row_width = 1)
        but = types.InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—åüá∑üá∫üí≥", callback_data="setCardRu")
        but1 = types.InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—åüá∫üá¶üí≥", callback_data="setCardUA")
        but2 = types.InlineKeyboardButton("üí±–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –í–∞–ª—é—Ç—ãüí±", callback_data="setWal")
        markup.add(but,but1,but2)
        bot.send_message(message.chat.id,"ü§¥–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ü§¥",reply_markup=markup)
        
            

def SetCardData(message):
    try:
        cards = int(message.text)
        files = open('cardUA.txt', 'w')
        files.write(str(cards))
        files.close()
        bot.send_message(message.chat.id,f"<b>‚úÖ–ö–∞—Ä—Ç–∞: {cards} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞!</b>")
    except:
        markup = types.InlineKeyboardMarkup(row_width = 2)
        but = types.InlineKeyboardButton("üí≥–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—Éüí≥", callback_data="setCard")
        markup.add(but)
        bot.send_message(message.chat.id, "<b>ü§¶–¢—ã –¥–∞—É–Ω?–¶–∏—Ñ—Ä—ã –≤–≤–æ–¥–∏!ü§¶</b>",reply_markup=markup)


def SetCardDataRU(message):
    try:
        cardss = int(message.text)
        files = open('cardRU.txt', 'w')
        files.write(str(cardss))
        files.close()
        bot.send_message(message.chat.id,f"<b>‚úÖ–ö–∞—Ä—Ç–∞: {cardss} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞!</b>")
    except:
        markup = types.InlineKeyboardMarkup(row_width = 2)
        but = types.InlineKeyboardButton("üí≥–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—Éüí≥", callback_data="setCard")
        markup.add(but)
        bot.send_message(message.chat.id, "<b>ü§¶–¢—ã –¥–∞—É–Ω?–¶–∏—Ñ—Ä—ã –≤–≤–æ–¥–∏!ü§¶</b>",reply_markup=markup)



@bot.message_handler(content_types=['text'])
def opensMamonts(message):
    if message.text == "/worker":
        menu_worker(message)
    if message.text == "üñ±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        db = sqlite3.connect('users.db')
        sql = db.cursor()
        sql.execute(f"SELECT * FROM users WHERE id = {message.from_user.id}")
        excepts = sql.fetchone()
        s = "‚ùå"
        if excepts[3] == 'False':
            s = "‚ùå"
        if excepts[3] == 'True':
            s = "‚úÖ"
        activity_user = random.randint(340, 720)
        markup = types.InlineKeyboardMarkup(row_width=2)
        but = types.InlineKeyboardButton("üìàECN —Å—á—ë—Ç", callback_data="inv")
        but1 = types.InlineKeyboardButton("üí∞–ö–æ—à–µ–ª–µ–∫üí∞", callback_data="wallet")
        but2 = types.InlineKeyboardButton("‚ùìinfo‚ùì", callback_data="info")
        but3 = types.InlineKeyboardButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setings")
        but4 = types.InlineKeyboardButton("üõ†–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{support}")

        markup.add(but, but1, but2, but3, but4)

        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        photo_path = os.path.abspath('startPhoto.jpg')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        send_photo_with_check(
            bot,
            message.chat.id,
            photo_path,
            f"üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\nüó£–ò–º—è: {message.from_user.first_name}\nü¶æ–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {s}\nü§ù–°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {excepts[4]}\nüßëüèª‚Äçüíª–¢—Ä–µ–π–¥–µ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω: {activity_user}",
            reply_markup=markup
        )

    else:
        db = sqlite3.connect('users.db')
        sql = db.cursor()
        idMamont = message.text.split('/')[-1]
        sql.execute(f"SELECT refid FROM worker")
        dataa = sql.fetchall()
        print(dataa)
        try:
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM worker WHERE refid = {idMamont}")
            dataMamont = sql.fetchone()
            sql.execute(f"SELECT * FROM users WHERE id = {idMamont}")
            dataWork = sql.fetchone()
            sql.execute(f"SELECT refid FROM worker WHERE idW = {message.chat.id}") 
            idWorks = message.chat.id
            data = sql.fetchall()
            for idWorks in data:
                print(dataMamont[4])
                ver = "ERROR"
                if dataMamont[4] == "False":
                    ver = "‚úñÔ∏è"
                if dataMamont[4] == "True":
                    ver = "‚úîÔ∏è"
                lucks = "ERROR"
                if dataMamont[6] == 0:
                    lucks = "Only Winüëç"
                if dataMamont[6] == 1:
                    lucks = "Only Loseüëé"
                if dataMamont[6] == 2:
                    lucks = "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—èüîû"

                markup = types.InlineKeyboardMarkup(row_width = 1)
                balance = types.InlineKeyboardButton("üí∞–±–∞–ª–∞–Ω—Å", callback_data=f"balanceMamont_{idMamont}")
                verifickation = types.InlineKeyboardButton("üñ•–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data=f"verMamont_{idMamont}")
                luck = types.InlineKeyboardButton("‚òòÔ∏è—É–¥–∞—á–∞", callback_data=f"luckMamont_{idMamont}")
                setDep = types.InlineKeyboardButton("üí±–ú–∏–Ω–î–µ–ø", callback_data=f"SetMinDep_{idMamont}")
                alert = types.InlineKeyboardButton("üí≠—Å–º—Å –º–∞–º–æ–Ω—Ç—É", callback_data=f"alertmamont_{idMamont}")
                buton_dell_mamunt = types.InlineKeyboardButton("üöÆ–£–¥–∞–ª–∏—Ç—å –ú–∞–º–æ–Ω—Ç–∞", callback_data=f"delMamonts_{idMamont}")
                markup.add(balance,verifickation,luck,setDep,alert,buton_dell_mamunt)
            sql.execute(f"SELECT * FROM users WHERE id = {idMamont}")
            datatU = sql.fetchone()
            bot.send_message(message.chat.id, f"<b>ü¶£–ú–∞–º–æ–Ω—Ç @{dataMamont[2]}\nüí∞–ë–∞–ª–∞–Ω—Å: {dataMamont[3]} {datatU[6]}\nüñ•–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {ver}\n‚òòÔ∏è–£–¥–∞—á–∞: {lucks}\n‚öúÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: {dataMamont[7]} {dataWork[6]}</b>",reply_markup=markup)
        except:
            pass
        

@bot.message_handler(commands=["worker"])
def menu_worker(message):
    db = sqlite3.connect('users.db')
    sql = db.cursor()
    db.commit()
    sql.execute(f"SELECT COUNT(refid) FROM worker WHERE idW = {message.chat.id}")
    uid = sql.fetchone()
    markup = types.InlineKeyboardMarkup(row_width = 2)
    but = types.InlineKeyboardButton("ü¶£ –ú–æ–∏ –º–∞–º–æ–Ω—Ç—ã", callback_data=f"MyMamont")
    but1 = types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"AddPromo")
    but4 = types.InlineKeyboardButton("–†–µ—Ñ.–°—Å—ã–ª–∫–∞", url=f"https://t.me/{botName}?start={message.chat.id}")
    markup.add(but,but1,but4)
    bot.send_message(message.chat.id, f"<b>‚öúÔ∏è–ü–∞–Ω–µ–ª—å –≤–æ—Ä–∫–µ—Ä–∞:\n\nü¶£–ú–∞–º–æ–Ω—Ç–æ–≤: {uid[0]}\nüí≥–ö–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:: 5169155129365688\nüßäC—Å—ã–ª–∫–∞:</b><code>https://t.me/{botName}?start={message.chat.id}</code>",reply_markup=markup)
    
        
def myMamont(message):
    db = sqlite3.connect('users.db')
    sql = db.cursor()
    ref_text = f"–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: \n"
    data = sql.execute(f"SELECT refid,refusernames,refcash,refverif,refsdelka,refluck FROM worker WHERE idW = {message.chat.id}").fetchall()
    for user in data:
        id = user[0]
        username = user[1]
        ref_text = ref_text + f"üÜî: <b>/{id}</b>--- üë®‚Äçü¶±: @{username}---\n\n"
    markup = types.InlineKeyboardMarkup(row_width = 2)
    buton_mamunt = types.InlineKeyboardButton("‚ûï–î–æ–±–∞–≤–∏—Ç—å –º–∞–º–æ–Ω—Ç–æ–≤", callback_data="menuMamont")
    buton_dell_mamunt = types.InlineKeyboardButton("‚ûñ–£–¥–∞–ª–∏—Ç—å –ú–∞–º–æ–Ω—Ç–∞", callback_data="delMamont")
    markup.add(buton_mamunt,buton_dell_mamunt) 
    bot.send_message(message.chat.id, ref_text,reply_markup=markup) 
    

def setDepMin(message, idd):
    db = sqlite3.connect('users.db')
    sql = db.cursor()
    msg = int(message.text)
    sql.execute(f"UPDATE worker SET mindep = {msg} WHERE refid = {idd}")
    sql.execute(f"UPDATE users SET mindep = {msg} WHERE id = {idd}")
    db.commit()
    bot.send_message(message.chat.id, "<b>‚úÖ–ì–æ—Ç–æ–≤–æ</b>")

def alertM(message,idd):
    msg = message.text
    bot.send_message(idd,f"üîî<b>–ù–æ–≤–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>:\n\n {msg}")
    bot.send_message(message.chat.id, "<b>‚úÖ–ì–æ—Ç–æ–≤–æ</b>")
def menuMamont(message):
    idMamont = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ id –º–∞–º–æ–Ω—Ç–∞: ")
    bot.register_next_step_handler(idMamont,setDataMamontMenu)

def delMamont(message):
    idMamont = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ id –º–∞–º–æ–Ω—Ç–∞: ")
    bot.register_next_step_handler(idMamont,setDataMamontDell)

def setDataMamontDell(message):
    try:
        idMamont = message.text
        db = sqlite3.connect('users.db')
        sql = db.cursor()
        sql.execute(f"DELETE FROM worker WHERE refid = {idMamont}")
        db.commit()
        sql.execute(f"SELECT * FROM users WHERE id = {idMamont}")
        name = sql.fetchone()
        print(name[1])
        bot.send_message(message.chat.id, f"üóë<b>–ú–∞–º–æ–Ω—Ç @{name[1]} –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>")
    except:
        bot.send_message(message.chat.id, f"<b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>")

def setDataMamontMenu(message):
    try:
        idMamont = message.text 
        db = sqlite3.connect('users.db')
        sql = db.cursor()
        sql.execute(f"SELECT username FROM users WHERE id = {idMamont}")
        datsUs = sql.fetchone()
        sql.execute(f"SELECT refid FROM worker WHERE refid = {idMamont}")
        data = sql.fetchone()
        if data is None:
            sql.execute(f"INSERT OR IGNORE INTO worker (idW, refid, refusernames, refcash, refverif, refsdelka, refluck, mindep) VALUES({message.chat.id}, {idMamont}, '{datsUs[0]}', {0}, 'False', {0}, {0}, {500});")
            db.commit() 
        bot.send_message(message.chat.id, f"‚úÖ<b>–ú–∞–º–æ–Ω—Ç @{datsUs[0]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\nüè°–ß—Ç–æ–±—ã –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞ –Ω–∞–∂–º–∏ –Ω–µ => /{idMamont}</b>")
    except:
        bot.send_message(message.chat.id, "‚ùå–ú–∞–º–æ–Ω—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!‚ùå")



@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    req = call.data.split('_')
    if call.message:
        if call.data == "alertWork":
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
            bot.register_next_step_handler(msg, alertW)
        if call.data == "menu":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.from_user.id}")
            excepts = sql.fetchone()
            s = "‚ùå"
            if excepts[3] == 'False':
                s = "‚ùå"
            if excepts[3] == 'True':
                s = "‚úÖ"
            activity_user = random.randint(340, 720)
            markup = types.InlineKeyboardMarkup(row_width=2)
            but = types.InlineKeyboardButton("üìàECN —Å—á—ë—Ç", callback_data="inv")
            but1 = types.InlineKeyboardButton("üí∞–ö–æ—à–µ–ª–µ–∫üí∞", callback_data="wallet")
            but2 = types.InlineKeyboardButton("‚ùìinfo‚ùì", callback_data="info")
            but3 = types.InlineKeyboardButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setings")
            but4 = types.InlineKeyboardButton("üõ†–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{support}")

            markup.add(but, but1, but2, but3, but4)

            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            photo_path = os.path.abspath('startPhoto.jpg')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            send_photo_with_check(
                bot,
                call.message.chat.id,
                photo_path,
                f"üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\nüó£–ò–º—è: {call.from_user.first_name}\nü¶æ–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {s}\nü§ù–°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {excepts[4]}\nüßëüèª‚Äçüíª–¢—Ä–µ–π–¥–µ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω: {activity_user}",
                reply_markup=markup
            )
        if call.data == "RUB":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"UPDATE users SET val = 'RUB' WHERE id = {call.from_user.id}")
            db.commit()
            markup = types.InlineKeyboardMarkup(row_width = 2)
            menu = types.InlineKeyboardButton("–ú–µ–Ω—éüëâüèª", callback_data=f"menu")
            markup.add(menu) 
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"üëç –í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞!",reply_markup=markup)
        if req[0] == "newwal":
            vals = req[1]
            print(vals)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"UPDATE users SET val = '{vals}' WHERE id = {call.from_user.id}")
            db.commit()
            markup = types.InlineKeyboardMarkup(row_width = 2)
            menu = types.InlineKeyboardButton("–ú–µ–Ω—éüëâüèª", callback_data=f"menu")
            markup.add(menu) 
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"üëç –í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞!",reply_markup=markup)
        if call.data == "cleardb":
            try:
                db = sqlite3.connect('users.db')
                sql = db.cursor()
                sql.execute(f"DELETE FROM worker WHERE refid = {0}")
                db.commit()
                bot.send_message(call.message.chat.id,"–ë–î —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–Ω–∞!")
            except:
                bot.send_message(call.message.chat.id,"–î–ê–£–ù?")
        if call.data == "setCardUA":
            cards = bot.send_message(call.message.chat.id, "–í–≤–æ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É: ")
            bot.register_next_step_handler(cards, SetCardData)
        if call.data == "setCardRu":
            cardss = bot.send_message(call.message.chat.id, "–í–≤–æ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É: ")
            bot.register_next_step_handler(cardss, SetCardDataRU)
        if call.data == "inv":
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("Bitcoin", callback_data="BTC")
            but1 = types.InlineKeyboardButton("Ethereum", callback_data="ETH")
            but2 = types.InlineKeyboardButton("Tether", callback_data="TRC")
            but3 = types.InlineKeyboardButton("BNB", callback_data="BNB")
            but4 = types.InlineKeyboardButton("Ripple", callback_data="Ripple")
            but5 = types.InlineKeyboardButton("Nano", callback_data="Nano")
            but6 = types.InlineKeyboardButton("Dash", callback_data="Dash")
            but7 = types.InlineKeyboardButton("USD", callback_data="USD")
            but8 = types.InlineKeyboardButton("Cardano", callback_data="Cardano")
            markup.add(but,but1,but2,but3,but4,but5,but6,but7,but8)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_photo(call.message.chat.id, open('crypto.jpg', 'rb'))
            bot.send_message(call.message.chat.id, "<b>üìà–í–∞—à –ª–∏—á–Ω—ã–π ECN —Å—á–µ—Ç!\n\nüí†–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞:</b>",reply_markup=markup)
        if call.data == "Nano":
            t = api.get_price(ids='nano', vs_currencies='usd')['nano']['usd']
            r = random.randint(1,3)
            b = random.randint(1,2)
            s = "–î–∞—É–Ω"
            print(b)
            if b == 1:
                s = 'longüìà'
            if b == 2:
                s = 'shortüìâ'
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëâüèª–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É", callback_data=f"invs_{'Nano'}")
            markup.add(but)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"<b>ü™ô–ú–æ–Ω–µ—Ç–∞: Nano\n\nüí±–ö—É—Ä—Å: {t} USD\nüìà–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {s}\nüí∏–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {r}{datatU[6]}</b>",reply_markup=markup)

        
        if call.data == "Ripple":
            t = api.get_price(ids='ripple', vs_currencies='usd')['ripple']['usd']
            r = random.randint(18,50)
            b = random.randint(1,2)
            s = "–î–∞—É–Ω"
            print(b)
            if b == 1:
                s = 'longüìà'
            if b == 2:
                s = 'shortüìâ'
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëâüèª–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É", callback_data=f"invs_{'Ripple'}")
            markup.add(but)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"<b>ü™ô–ú–æ–Ω–µ—Ç–∞: Ripple\n\nüí±–ö—É—Ä—Å: {t} USD\nüìà–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {s}\nüí∏–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {r}{datatU[6]}</b>",reply_markup=markup)

        if call.data == "Dash":
            t = api.get_price(ids='dash', vs_currencies='usd')['dash']['usd']
            r = random.randint(22,32)
            b = random.randint(1,2)
            s = "–î–∞—É–Ω"
            print(b)
            if b == 1:
                s = 'longüìà'
            if b == 2:
                s = 'shortüìâ'
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëâüèª–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É", callback_data=f"invs_{'Dash'}")
            markup.add(but)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"<b>ü™ô–ú–æ–Ω–µ—Ç–∞: Dash\n\nüí±–ö—É—Ä—Å: {t} USD\nüìà–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {s}\nüí∏–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {r}{datatU[6]}</b>",reply_markup=markup)
        if call.data == "USD":
            t = api.get_price(ids='usd', vs_currencies='usd')['usd']['usd']
            r = random.uniform(0.5,1)
            b = random.randint(1,2)
            s = "–î–∞—É–Ω"
            print(b)
            if b == 1:
                s = 'longüìà'
            if b == 2:
                s = 'shortüìâ'
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëâüèª–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É", callback_data=f"invs_{'USD'}")
            markup.add(but)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"<b>ü™ô–ú–æ–Ω–µ—Ç–∞: USD\n\nüí±–ö—É—Ä—Å: {t} USD\nüìà–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {s}\nüí∏–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {r}{datatU[6]}</b>",reply_markup=markup)
        if call.data == "Cardano":
            t = api.get_price(ids='cardano', vs_currencies='usd')['cardano']['usd']
            r = random.randint(12,23)
            b = random.randint(1,2)
            s = "–î–∞—É–Ω"
            print(b)
            if b == 1:
                s = 'longüìà'
            if b == 2:
                s = 'shortüìâ'
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëâüèª–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É", callback_data=f"invs_{'Cardano'}")
            markup.add(but)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"<b>ü™ô–ú–æ–Ω–µ—Ç–∞: Cardano\n\nüí±–ö—É—Ä—Å: {t} USD\nüìà–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {s}\nüí∏–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {r}{datatU[6]}</b>",reply_markup=markup)
        
        
        
        if req[0] == "BTC":
            t = api.get_price(ids='bitcoin', vs_currencies='usd')['bitcoin']['usd']
            r = random.randint(390,870)
            b = random.randint(1,2)
            s = "–î–∞—É–Ω"
            print(b)
            if b == 1:
                s = 'longüìà'
            if b == 2:
                s = 'shortüìâ'
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëâüèª–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É", callback_data=f"invs_{'Bitcoin'}")
            markup.add(but)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"<b>ü™ô–ú–æ–Ω–µ—Ç–∞: Bitcoin\n\nüí±–ö—É—Ä—Å: {t} USD\nüìà–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {s}\nüí∏–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {r}{datatU[6]}</b>",reply_markup=markup)
        if call.data == "ETH":
            t = api.get_price(ids='ethereum', vs_currencies='usd')['ethereum']['usd']
            r = random.randint(100,179)
            b = random.randint(1,2)
            s = "–î–∞—É–Ω"
            print(b)
            if b == 1:
                s = 'longüìà'
            if b == 2:
                s = 'shortüìâ'
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëâüèª–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É", callback_data=f"invs_{'Ethereum'}")
            markup.add(but)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"<b>ü™ô–ú–æ–Ω–µ—Ç–∞: Ethereum\n\nüí±–ö—É—Ä—Å: {t} USD\nüìà–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {s}\nüí∏–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {r}{datatU[6]}</b>",reply_markup=markup)
        
        if call.data == "TRC":
            t = api.get_price(ids='tether', vs_currencies='usd')['tether']['usd']
            r = random.randint(7,11)
            b = random.randint(1,2)
            s = "–î–∞—É–Ω"
            print(b)
            if b == 1:
                s = 'longüìà'
            if b == 2:
                s = 'shortüìâ'
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëâüèª–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É", callback_data=f"invs_{'Tether'}")
            markup.add(but)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"<b>ü™ô–ú–æ–Ω–µ—Ç–∞: Tether\n\nüí±–ö—É—Ä—Å: {t} USD\nüìà–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {s}\nüí∏–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {r}{datatU[6]}</b>",reply_markup=markup)
        if call.data == "BNB":
            t = api.get_price(ids='binancecoin', vs_currencies='usd')['binancecoin']['usd']
            r = random.randint(122,150)
            b = random.randint(1,2)
            s = "–î–∞—É–Ω"
            print(b)
            if b == 1:
                s = 'longüìà'
            if b == 2:
                s = 'shortüìâ'
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëâüèª–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É", callback_data=f"invs_{'BNB'}")
            markup.add(but)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"<b>ü™ô–ú–æ–Ω–µ—Ç–∞: BNB\n\nüí±–ö—É—Ä—Å: {t} USD\nüìà–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {s}\nüí∏–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {r}{datatU[6]}</b>",reply_markup=markup)
        if call.data == "DOGE":
            t = api.get_price(ids='dogecoin', vs_currencies='usd')['dogecoin']['usd']
            r = random.randint(14,20)
            b = random.randint(1,2)
            s = "–î–∞—É–Ω"
            print(b)
            if b == 1:
                s = 'longüìà'
            if b == 2:
                s = 'shortüìâ'
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëâüèª–í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É", callback_data=f"invs_{'DogeCoin'}")
            markup.add(but)
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"<b>ü™ô–ú–æ–Ω–µ—Ç–∞: DogeCoin\n\nüí±–ö—É—Ä—Å: {t} USD\nüìà–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {s}\nüí∏–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {r}{datatU[6]}</b>",reply_markup=markup)
        
        
        
        
        
        
        
        if req[0] == "invs":
            moneta = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT cash FROM users WHERE id = {call.message.chat.id}")
            data = sql.fetchone()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.delete_message(call.message.chat.id, call.message.message_id)
            sums = bot.send_message(call.message.chat.id, f"‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\nüí∞–î–æ—Å—Ç—É–ø–Ω–æ: {data[0]} {datatU[6]}")
            bot.register_next_step_handler(sums, sumSetInvest,moneta)

        if call.data == "wallet":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            db.commit()
            try:
                print("connect access")
            except:
                bot.send_message(coder, "‚ùå<b>–ü—Ä–æ–≤–µ—Ä—å –ë–î –≤ –∫–æ–ª–ª–±–µ–∫ WALLET</b>‚ùå")
            sql.execute(f"SELECT cash FROM users WHERE id = {call.message.chat.id}")
            money = sql.fetchone()[0]
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="Deposit")
            but1 = types.InlineKeyboardButton("‚ûñ –í—ã–≤–µ—Å—Ç–∏", callback_data="Widtraw")
            usepromo = types.InlineKeyboardButton("üî•–ü—Ä–æ–º–æ–∫–æ–¥üî•", callback_data="usepromo")
            markup.add(but,but1,usepromo)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            bot.send_message(chat_id = call.message.chat.id,text=f"üíº –í–∞—à –∫–æ—à–µ–ª–µ–∫:\n\nüÜîUID –∫–æ—à–µ–ª—å–∫–∞: {call.message.chat.id}\nüè¶–ë–∞–ª–∞–Ω—Å {money} {datatU[6]}",reply_markup=markup)
        if call.data == "Deposit":
            dep = bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ")
            bot.register_next_step_handler(dep, depositSumData)
        if call.data == "Widtraw":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f'SELECT cash FROM users WHERE id = {call.message.chat.id}')
            data = sql.fetchone()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            if data[0] == 0: 
                bot.send_message(call.message.chat.id, f'‚ùå<b>–í—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {data[0]} {datatU[6]}</b>')
            else:
                k = bot.send_message(call.message.chat.id, f'‚úçÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ <code>{data[0]}</code> {datatU[6]}</b>')
                bot.register_next_step_handler(k,WidtrawDep)
                
        if call.data == "info":
            markup = types.InlineKeyboardMarkup(row_width = 1)
            but4 = types.InlineKeyboardButton("üí≠–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫", url=f"{link}")
            but5 = types.InlineKeyboardButton("üü¢Live –í—ã–ø–ª–∞—Ç—ã", url=f"{linkchatW}")
            menu = types.InlineKeyboardButton("üëâüèª–ú–µ–Ω—é", callback_data="menu")
            markup.add(but4,but5,menu)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            dic = open("about.txt", "r" , encoding="utf-8")
            abouts = dic.read()
            dic.close()
            bot.send_message(call.message.chat.id,f"üî∑<b>–û —Å–µ—Ä–≤–∏—Å–µ\n\n{abouts}</b>",reply_markup=markup)
        if req[0] == "setings":
            markup = types.InlineKeyboardMarkup(row_width = 1)
            but = types.InlineKeyboardButton("üßë‚Äçüíª–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="GoVerif")
            but1 = types.InlineKeyboardButton("üõ†–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{support}")
            markup.add(but,but1)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(chat_id = call.message.chat.id, text="<b>‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>",reply_markup=markup)
        if call.data == "ChangeWal":
            sql.execute("SELECT * FROM valute WHERE stat = 'True' ")
            datV = sql.fetchall()
            markups = types.InlineKeyboardMarkup(row_width=2)
            buttons = []
            for i in datV:
                button = types.InlineKeyboardButton(text= str(i[0]), callback_data = f"newwal_{i[0]}")
                buttons.append(button)
            markups.add(*buttons)
            bot.send_message(call.message.chat.id, "<b>üí±–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –≤–∞–ª—é—Ç—É</b>",reply_markup=markups)

        if call.data == "GoVerif":
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data=f"SetWerif")
            markup.add(but)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id,"‚ÑπÔ∏è<b>–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á—ë—Ç–∞ –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è:\n\nüëâ–ö–∞—Ä—Ç–∞ —Å –∫–æ—Ç–æ—Ä–æ–π –í—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏ —Å—á—ë—Ç\nüëâ–ü–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ</b>\n\n<i>‚ùï–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö!–î–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ª–∏—à—å –¥–ª—è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á—ë—Ç–∞\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ª–∏—à—å –æ–¥–∏–Ω —Ä–∞–∑!</i>",reply_markup=markup)
        if call.data == "SetWerif":
            t = bot.send_message(call.message.chat.id, "üí≥<b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —Å—á—ë—Ç–∞</b>:")
            bot.register_next_step_handler(t, setPhotoCard)
        if req[0] == "cardYes":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            idLohs = req[1]
            sql.execute(f"SELECT * FROM worker WHERE refid = {idLohs}")
            datas = sql.fetchone()
            idWork = datas[0]
            print(idWork , datas[2])
            bot.send_message(idWork, f"‚ùï<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞–º–æ–Ω—Ç—É: @{datas[2]}</b>\nüëç<i>–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!</i>")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            k = bot.send_message(idLohs, "<b>üëçüèª–§–æ—Ç–æ –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É!\nüé´–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞!</b>")
            bot.register_next_step_handler(k,setPhotoPassp)
        if req[0] == "NoCard":
            idLohs = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            idLohs = req[1]
            sql.execute(f"SELECT * FROM worker WHERE refid = {idLohs}")
            datas = sql.fetchone()
            idWork = datas[0]
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data=f"SetWerif")
            markup.add(but)
            bot.send_message(idWork, f"‚ùï<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞–º–æ–Ω—Ç—É: @{datas[2]}</b>\nüëéüèª<i>–ú–∞–º–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –±—Ä–µ–¥!</i>")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            k = bot.send_message(idLohs, "<b>–§–æ—Ç–æ –∫–∞—Ä—Ç—ã –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!\n‚ö†Ô∏è–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–æ—Ç–æ —á—ë—Ç–∫–æ–µ –∏ –Ω–µ –∑–∞—Å–≤–µ—á–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã!</b>",reply_markup=markup)
        if req[0] == "passYes":
            idLohs = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM worker WHERE refid = {idLohs}")
            datas = sql.fetchone()
            sql.execute(f"UPDATE worker SET refverif = 'True' WHERE refid = {idLohs}")
            sql.execute(f"UPDATE users SET verif = 'True' WHERE id = {idLohs}")
            db.commit()
            idWork = datas[0]
            bot.send_message(idWork, f"‚ùï<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞–º–æ–Ω—Ç—É: @{datas[2]}</b>\nüñ•<i>–ú–∞–º–æ–Ω—Ç –ø—Ä–æ—à—ë–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!</i>")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(idLohs, "<b>‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü—é!</b>\n‚öúÔ∏è<b>–¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n\nüëâüèª–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\nüëâüèª–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∞–ª—é—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞\nüëâüèª–£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö</b>")
            
        if req[0] == "passNo":
            idLohs = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM worker WHERE refid = {idLohs}")
            datas = sql.fetchone()
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data=f"SetWerif")
            markup.add(but)
            bot.send_message(datas[0], f"‚ùï<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞–º–æ–Ω—Ç—É: @{datas[2]}</b>\nüñ•<i>–ú–∞–º–æ–Ω—Ç –ø—Ä–∏—Å–ª–∞–ª –≥–∞–ª–∏–º—É—é —Ñ–æ—Ç–∫—É –ø–∞—Å–ø–æ—Ä—Ç–∞</i>")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(idLohs, "<b>‚ùóÔ∏è–§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É!</b>\n<b>‚ö†Ô∏è–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–æ—Ç–æ —á—ë—Ç–∫–æ–µ –∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –º–æ–∂–Ω–æ –ø—Ä–æ—á–µ—Å—Ç—å!</b>",reply_markup=markup)


        if req[0] == f"YesDep":
            try:
                db = sqlite3.connect('users.db')
                sql = db.cursor()
                sql.execute(f"SELECT * FROM worker WHERE refid = {call.from_user.id}")
                datas = sql.fetchone()
                if datas is None:
                    bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
                idWork = datas[0]
                sql.execute(f"SELECT username FROM users WHERE id = {idWork}")
                us = sql.fetchone()
                markup = types.InlineKeyboardMarkup(row_width = 2)
                deposit = req[1] 
                idLOH = call.message.chat.id
                but = types.InlineKeyboardButton("‚ûï –û–ø–ª–∞—Ç–∏–ª", callback_data=f"Accept_{deposit}_{idLOH}")
                but1 = types.InlineKeyboardButton("‚ûñ –î–µ–Ω—å–≥–∏ –Ω–µ –ø—Ä–∏—à–ª–∏", callback_data=f"Decline_{deposit}_{idLOH}")
                menu = types.InlineKeyboardButton("üëâüèª–ú–µ–Ω—é", callback_data="menu")
                markup.add(but,but1,menu)
                sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")    
                datatU = sql.fetchone()        
                print(call.message.chat.id)
                print(call.message.message_id)
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(chatAdmin, f"<b>üîî –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –æ–ø–ª–∞—Ç–∏–ª {deposit} {datatU[6]}!\nüó£–í–æ—Ä–∫–µ—Ä: @{us[0]}</b>",reply_markup=markup)
                bot.send_message(chat_id = idLOH, text="–ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É...")
                bot.send_message(idWork, f"‚ùï<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞–º–æ–Ω—Ç—É: @{datas[2]}\n</b>\nüîÖ<i>–ú–∞–º–æ–Ω—Ç –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–æ–ø–ª–∞—Ç–∏–ª'\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É</i>")
            except:
                bot.send_message(call.message.chat.id, "‚ùóÔ∏è–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")

        if req[0] == "Accept":
            try:
                db = sqlite3.connect('users.db')
                sql = db.cursor()
                deposits = req[1]
                idL = req[2]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                sql.execute(f"SELECT cash FROM users WHERE id = {idL}")
                dataCash = sql.fetchone()
                if dataCash is None:
                    bot.send_message(chatAdmin, "‚ùå<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>‚ùå")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                endBalance = int(dataCash[0]) + int(deposits)
                sql.execute(f"UPDATE users SET cash = {endBalance} WHERE id = {idL}")
                sql.execute(f"UPDATE worker SET refcash = {endBalance} WHERE refid = {idL}")
                db.commit()
                print("–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                sql.execute(f"SELECT * FROM users WHERE id = {idL}")
                datatU = sql.fetchone()
                if datatU is None:
                    bot.send_message(chatAdmin, "‚ùå<b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>‚ùå")
                    return

                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                except telebot.apihelper.ApiTelegramException as e:
                    if "message to delete not found" in str(e):
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                    else:
                        raise e  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                bot.send_message(chatAdmin, "‚úÖ–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!")
                bot.send_message(chat_id=idL,
                                 text=f"<b>‚úÖ–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É: {deposits} {datatU[6]}\nüè¶–í–∞—à –±–∞–ª–∞–Ω—Å: {endBalance} {datatU[6]}</b>")

            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                bot.send_message(chatAdmin, f"‚ùå<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:</b>‚ùå\n<code>{e}</code>")
            finally:
                db.close()

        elif req[0] == "Decline":
            try:
                idLL = req[2]
                bot.send_message(chat_id=idLL, text=f"<b>‚ùå–ú—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É –æ—Ç –í–∞—Å!‚ùå</b>")
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(chatAdmin, "‚ùå<b>–ù–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –±–∞–ª–∞–Ω—Å</b>‚ùå")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                bot.send_message(chatAdmin, f"‚ùå<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:</b>‚ùå\n<code>{e}</code>")

        elif call.data == "MyMamont":
            myMamont(call.message)

        elif call.data == "menuMamont":
            menuMamont(call.message)

        elif call.data == "delMamont":
            delMamont(call.message)

        elif req[0] == "delMamonts":
            try:
                ids = req[1]
                db = sqlite3.connect('users.db')
                sql = db.cursor()
                sql.execute(f"DELETE FROM worker WHERE refid = {ids}")
                db.commit()

                sql.execute(f"SELECT * FROM users WHERE id = {ids}")
                name = sql.fetchone()
                if name is None:
                    bot.send_message(call.message.chat.id, "‚ùå<b>–ú–∞–º–æ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>‚ùå")
                    return

                bot.send_message(call.message.chat.id, f"üóë<b>–ú–∞–º–æ–Ω—Ç @{name[1]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                bot.send_message(call.message.chat.id, f"‚ùå<b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:</b>‚ùå\n<code>{e}</code>")
            finally:
                db.close()

        elif req[0] == "SetMinDep":
            try:
                idd = req[1]
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            text=f"‚úçÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:</b>")
                bot.register_next_step_handler(msg, setDepMin, idd)
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                bot.send_message(chatAdmin, f"‚ùå<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:</b>‚ùå\n<code>{e}</code>")

        elif req[0] == "alertmamont":
            try:
                idd = req[1]
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            text=f"‚úçÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞–º–æ–Ω—Ç—É:</b>")
                bot.register_next_step_handler(msg, alertM, idd)
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                bot.send_message(chatAdmin, f"‚ùå<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞–º–æ–Ω—Ç—É:</b>‚ùå\n<code>{e}</code>")

        elif req[0] == 'balanceMamont':
            try:
                idMamonta = req[1]
                db = sqlite3.connect('users.db')
                sql = db.cursor()
                sql.execute(f"SELECT * FROM worker WHERE refid = {idMamonta}")
                moneuToRef = sql.fetchone()

                if moneuToRef is None:
                    bot.send_message(call.message.chat.id, "‚ùå<b>–î–∞–Ω–Ω—ã–µ –º–∞–º–æ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>‚ùå")
                    return

                markup = types.InlineKeyboardMarkup(row_width=2)
                but = types.InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"DepMamont_{idMamonta}")
                markup.add(but)

                sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
                datatU = sql.fetchone()
                if datatU is None:
                    bot.send_message(call.message.chat.id, "‚ùå<b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>‚ùå")
                    return

                bot.send_message(call.message.chat.id,
                                 f"<b>ü§ë–ë–∞–ª–∞–Ω—Å –ú–∞–º–æ–Ω—Ç–∞: {moneuToRef[3]} {datatU[6]}\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Åüëá</b>",
                                 reply_markup=markup)
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                bot.send_message(chatAdmin, f"‚ùå<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –º–∞–º–æ–Ω—Ç–∞:</b>‚ùå\n<code>{e}</code>")
        if req[0] == "verMamont":
            idMamonta = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM worker WHERE refid = {idMamonta}")
            verifToRef = sql.fetchone()
            markup = types.InlineKeyboardMarkup(row_width = 2)
            ver = "ERROR"
            if verifToRef[4] == "False":
                ver = "‚úñÔ∏è"
            if verifToRef[4] == "True":
                ver = "‚úîÔ∏è"
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("‚úîÔ∏è", callback_data=f"AccWerMamont_{idMamonta}")
            but1 = types.InlineKeyboardButton("‚úñÔ∏è", callback_data=f"DecWerMamont_{idMamonta}")
            markup.add(but,but1)
            bot.send_message(call.message.chat.id, f"<b>üîû C—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ú–∞–º–æ–Ω—Ç–∞ @{verifToRef[2]}\nüîã–°—Ç–∞—Ç—É—Å: {ver}\nüëá–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Åüëá</b>",reply_markup=markup)
        if req[0] == "luckMamont":
            idMamonta = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM worker WHERE refid = {idMamonta}")
            luckToRef = sql.fetchone()
            luks = 0
            if luckToRef[6] == 0:
                luks = "üëç–ü–æ–±–µ–¥–∞"
            if luckToRef[6] == 1:
                luks = "üëé–ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
            if luckToRef[6] == 2:
                luks = "üîû–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—èüîû"
            markup = types.InlineKeyboardMarkup(row_width = 2)
            but = types.InlineKeyboardButton("üëç", callback_data=f"Win_{idMamonta}")
            but1 = types.InlineKeyboardButton("üëé", callback_data=f"Lose_{idMamonta}")
            but2 = types.InlineKeyboardButton("üîû", callback_data=f"WerifLose_{idMamonta}")
            markup.add(but,but1,but2)
            bot.send_message(call.message.chat.id, f"<b>üçÄ–£–¥–∞—á–∞ –º–∞–º–æ–Ω—Ç–∞ @{luckToRef[2]}\nüêí–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–∞–º–æ–Ω—Ç–∞ —Å—Ç–æ–∏—Ç: {luks}</b>",reply_markup=markup)
        if req[0] == "DepMamont":
            id_Mamont = req[1]
            t =  bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"‚úçÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç—É:</b>")
            print("works")
            bot.register_next_step_handler(t,GiveMoneuMamont,id_Mamont)
            print("work")
        if req[0] == "AccWerMamont":
            id_Mamont = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"UPDATE worker SET refverif = 'True' WHERE refid = {id_Mamont}")
            sql.execute(f"UPDATE users SET verif = 'True' WHERE id = {id_Mamont}")
            db.commit()
            sql.execute(f"SELECT * FROM worker WHERE refid = {id_Mamont}")
            verifToRef = sql.fetchone()
            ver = "ERROR"
            if verifToRef[4] == "False":
                ver = "‚úñÔ∏è"
            if verifToRef[4] == "True":
                ver = "‚úîÔ∏è"
                bot.send_message(id_Mamont, f"<b>‚ùï–í–∞—à —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω ‚úÖ</b>")
            bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {ver}")
        if req[0] == "DecWerMamont":
            id_Mamont = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"UPDATE worker SET refverif = 'False' WHERE refid = {id_Mamont}")
            sql.execute(f"UPDATE users SET verif = 'False' WHERE id = {id_Mamont}")
            sql.execute(f"SELECT * FROM worker WHERE refid = {id_Mamont}")
            verifToRef = sql.fetchone()
            db.commit()
            ver = "ERROR"
            if verifToRef[4] == "False":
                ver = "‚úñÔ∏è"
            if verifToRef[4] == "True":
                ver = "‚úîÔ∏è"
            bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {ver}")
        if req[0] == "Win":
            id_Mamont = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"UPDATE worker SET refluck = {0} WHERE refid = {id_Mamont}")
            sql.execute(f"UPDATE users SET luck = {0} WHERE id = {id_Mamont}")
            db.commit()
            sql.execute(f"SELECT * FROM worker WHERE refid = {id_Mamont}")
            luckToRef = sql.fetchone()
            luks = 0
            if luckToRef[6] == 0:
                luks = "üëç"
            if luckToRef[6] == 1:
                luks = "üëé"
            if luckToRef[6] == 2:
                luks = "üîû–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—èüîû"
            bot.send_message(call.message.chat.id, f"‚úÖ<b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {luks}</b>")

        if req[0] == "Lose":
            id_Mamont = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"UPDATE worker SET refluck = {1} WHERE refid = {id_Mamont}")
            sql.execute(f"UPDATE users SET luck = {1} WHERE id = {id_Mamont}")
            db.commit()
            sql.execute(f"SELECT * FROM worker WHERE refid = {id_Mamont}")
            luckToRef = sql.fetchone()
            luks = 0
            if luckToRef[6] == 0:
                luks = "üëç"
            if luckToRef[6] == 1:
                luks = "üëé"
            if luckToRef[6] == 2:
                luks = "üîû–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—èüîû"
            bot.send_message(call.message.chat.id, f"‚úÖ<b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {luks}</b>")
            

        if req[0] == "WerifLose":
            id_Mamont = req[1]
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"UPDATE worker SET refluck = {2} WHERE refid = {id_Mamont}")
            sql.execute(f"UPDATE users SET luck = {2} WHERE id = {id_Mamont}")
            db.commit()
            sql.execute(f"SELECT * FROM worker WHERE refid = {id_Mamont}")
            luckToRef = sql.fetchone()
            luks = 0
            if luckToRef[6] == 0:
                luks = "üëç"
            if luckToRef[6] == 1:
                luks = "üëé"
            if luckToRef[6] == 2:
                luks = "üîû–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—èüîû"
            
            bot.send_message(call.message.chat.id, f"‚úÖ<b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {luks}</b>")
            
        if req[0] == "UP":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            data = sql.fetchone()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            reS = ['üü¢long','üî¥short']
            print(data[5])
            if data[5] == 0:
                monetka = req[3]
                te = int(req[2])
                n = 0
                while n != te:
                    n += 1
                    tss = random.choice(reS)
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"‚¨ÜÔ∏è–í–≤–µ—Ä—Ö\n\nü™ô–ê–∫—Ç–∏–≤: {monetka}\n–°—É–º–º–∞ –ø—É–ª–∞: {req[1]} {datatU[6]}\nüöÄ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞:{tss}\n‚è∞–í—Ä–µ–º—è: {te - n}")
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id,"–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É...")
                t = int(req[1])
                ret = int(t) * 2 - int(t)
                sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
                datar = sql.fetchone()
                sql.execute(f"SELECT * FROM worker WHERE refid = {call.message.chat.id}")
                datas = sql.fetchone()
                print(ret)
                res = int(datar[2]) + int(ret)
                ress = int(datas[3]) + int(ret)
                sdk = int(datar[4]) + 1 
                sdkk = int(datas[5]) + 1
                print(datar[4])
                print(datas[5])
                print(sdk)
                print(sdkk)
                sql.execute(f"UPDATE users SET cash = {res} WHERE id = {call.message.chat.id}")
                sql.execute(f"UPDATE users SET sdelka = {sdk} WHERE id = {call.message.chat.id}")
                sql.execute(f"UPDATE worker SET refcash = {ress} WHERE refid = {call.message.chat.id}")
                sql.execute(f"UPDATE worker SET refsdelka = {sdkk} WHERE refid = {call.message.chat.id}")
                db.commit()
                sql.execute(f"SELECT * FROM worker WHERE refid = {call.message.chat.id}")
                datas = sql.fetchone()
                sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
                datatU = sql.fetchone()
                bot.send_message(datas[0], f"‚ÑπÔ∏è<b>–ú–∞–º–æ–Ω—Ç @{datas[2]} –ø–æ–¥–Ω—è–ª {ret + t} {datatU[6]}\n–ë–∞–ª–∞–Ω—Å: {datas[3]} {datatU[6]}</b>")
                markup = types.InlineKeyboardMarkup(row_width = 2)
                but = types.InlineKeyboardButton("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="inv")
                markup.add(but)
                bot.send_message(call.message.chat.id, f"<b>ü§ù–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞\n–í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å: {ret + t}</b> {datatU[6]}",reply_markup=markup)
            if data[5] == 1:
                monetka = req[3]
                te = int(req[2])
                n = 0
                reS = ['üü¢long','üî¥short']
                while n != te:
                    n += 1
                    tss = random.choice(reS)
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"‚¨ÜÔ∏è–í–≤–µ—Ä—Ö\n\nü™ô–ê–∫—Ç–∏–≤: {monetka}\n–°—É–º–º–∞ –ø—É–ª–∞: {req[1]} {datatU[6]}\nüöÄ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞:{tss}\n‚è∞–í—Ä–µ–º—è: {te - n}")                
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id,"–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É...")
                t = int(req[1])
                sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
                datar = sql.fetchone()
                sql.execute(f"SELECT * FROM worker WHERE refid = {call.message.chat.id}")
                datas = sql.fetchone()
                res = int(datar[2]) - int(t)
                ress = int(datas[3]) - int(t)
                sdk = int(datar[4]) + 1 
                sdkk = int(datas[5]) + 1
                print(datar[4])
                print(datas[5])
                print(sdk)
                print(sdkk)
                sql.execute(f"UPDATE users SET cash = {res} WHERE id = {call.message.chat.id}")
                sql.execute(f"UPDATE users SET sdelka = {sdk} WHERE id = {call.message.chat.id}")
                sql.execute(f"UPDATE worker SET refcash = {ress} WHERE refid = {call.message.chat.id}")
                sql.execute(f"UPDATE worker SET refsdelka = {sdkk} WHERE refid = {call.message.chat.id}")
                db.commit()
                sql.execute(f"SELECT * FROM worker WHERE refid = {call.message.chat.id}")
                datas = sql.fetchone()
                sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
                datatU = sql.fetchone()
                bot.send_message(datas[0], f"‚ÑπÔ∏è<b>–ú–∞–º–æ–Ω—Ç @{datas[2]} –ø—Ä–æ–∏–≥—Ä–∞–ª {t} {datatU[6]}\n–ë–∞–ª–∞–Ω—Å: {datas[3]} {datatU[6]}</b>")
                markup = types.InlineKeyboardMarkup(row_width = 2)
                but = types.InlineKeyboardButton("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="inv")
                markup.add(but)
                bot.send_message(call.message.chat.id, f"<b>ü§ù–ù–µ —É—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞\n–í–∞—à —É–±—ã—Ç–æ–∫: {t} {datatU[6]}</b>",reply_markup=markup)
            if data[5] == 2:
                markup = types.InlineKeyboardMarkup(row_width=1)
                but = types.InlineKeyboardButton("üßë‚Äçüíª–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="GoVerif")
                but1 = types.InlineKeyboardButton("üõ†–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{support}")
                markup.add(but,but1)
                bot.send_message(call.message.chat.id, f"<b>‚ö†Ô∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ!‚ö†Ô∏è</b>",reply_markup=markup)
        if req[0] == "DOWN":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            data = sql.fetchone()
            sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
            datatU = sql.fetchone()
            print(data[5])
            if data[5] == 0:
                monetka = req[3]
                te = int(req[2])
                n = 0
                reS = ['üü¢long','üî¥short']
                while n != te:
                    n += 1
                    tss = random.choice(reS)
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"‚¨áÔ∏è–í–ù–ò–ó\n\nü™ô–ê–∫—Ç–∏–≤: {monetka}\n–°—É–º–º–∞ –ø—É–ª–∞: {req[1]} {datatU[6]}\nüöÄ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞:{tss}\n‚è∞–í—Ä–µ–º—è: {te - n}")                
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id,"–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É...")
                
                t = int(req[1])
                t = int(req[1])
                ret = int(t) * 2 - int(t)
                sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
                datar = sql.fetchone()
                sql.execute(f"SELECT * FROM worker WHERE refid = {call.message.chat.id}")
                datas = sql.fetchone()
                print(ret)
                res = int(datar[2]) + int(ret)
                ress = int(datas[3]) + int(ret)
                sdk = int(datar[4]) + 1 
                sdkk = int(datas[5]) + 1
                print(datar[4])
                print(datas[5])
                print(sdk)
                print(sdkk)
                sql.execute(f"UPDATE users SET cash = {res} WHERE id = {call.message.chat.id}")
                sql.execute(f"UPDATE users SET sdelka = {sdk} WHERE id = {call.message.chat.id}")
                sql.execute(f"UPDATE worker SET refcash = {ress} WHERE refid = {call.message.chat.id}")
                sql.execute(f"UPDATE worker SET refsdelka = {sdkk} WHERE refid = {call.message.chat.id}")
                db.commit()
                sql.execute(f"SELECT * FROM worker WHERE refid = {call.message.chat.id}")
                datas = sql.fetchone()
                sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
                datatU = sql.fetchone()
                bot.send_message(datas[0], f"‚ÑπÔ∏è<b>–ú–∞–º–æ–Ω—Ç @{datas[2]} –ø–æ–¥–Ω—è–ª {ret + t} {datatU[6]}\n–ë–∞–ª–∞–Ω—Å: {datas[3]} {datatU[6]}</b>")
                markup = types.InlineKeyboardMarkup(row_width = 2)
                but = types.InlineKeyboardButton("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="inv")
                markup.add(but)
                bot.send_message(call.message.chat.id, f"<b>ü§ù–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞\n–í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å: {ret + t}</b> {datatU[6]}",reply_markup=markup)
            if data[5] == 1:
                monetka = req[3]
                te = int(req[2])
                n = 0
                reS = ['üü¢long','üî¥short']
                while n != te:
                    n += 1
                    tss = random.choice(reS)
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f"‚¨áÔ∏è–í–ù–ò–ó\n\nü™ô–ê–∫—Ç–∏–≤: {monetka}\n–°—É–º–º–∞ –ø—É–ª–∞: {req[1]} {datatU[6]}\nüöÄ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞:{tss}\n‚è∞–í—Ä–µ–º—è: {te - n}")                
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id,"–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É...")
                
                t = int(req[1])
                t = int(req[1])
                sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
                datar = sql.fetchone()
                sql.execute(f"SELECT * FROM worker WHERE refid = {call.message.chat.id}")
                datas = sql.fetchone()
                res = int(datar[2]) - int(t)
                ress = int(datas[3]) - int(t)
                sdk = int(datar[4]) + 1 
                sdkk = int(datas[5]) + 1
                print(datar[4])
                print(datas[5])
                print(sdk)
                print(sdkk)
                sql.execute(f"UPDATE users SET cash = {res} WHERE id = {call.message.chat.id}")
                sql.execute(f"UPDATE users SET sdelka = {sdk} WHERE id = {call.message.chat.id}")
                sql.execute(f"UPDATE worker SET refcash = {ress} WHERE refid = {call.message.chat.id}")
                sql.execute(f"UPDATE worker SET refsdelka = {sdkk} WHERE refid = {call.message.chat.id}")
                db.commit()
                sql.execute(f"SELECT * FROM worker WHERE refid = {call.message.chat.id}")
                datas = sql.fetchone()
                sql.execute(f"SELECT * FROM users WHERE id = {call.message.chat.id}")
                datatU = sql.fetchone()
                bot.send_message(datas[0], f"‚ÑπÔ∏è<b>–ú–∞–º–æ–Ω—Ç @{datas[2]} –ø—Ä–æ–∏–≥—Ä–∞–ª {t} {datatU[6]}\n–ë–∞–ª–∞–Ω—Å: {datas[3]} {datatU[6]}</b>")
                markup = types.InlineKeyboardMarkup(row_width = 2)
                but = types.InlineKeyboardButton("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="inv")
                markup.add(but)
                bot.send_message(call.message.chat.id, f"<b>ü§ù–ù–µ —É—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞\n–í–∞—à —É–±—ã—Ç–æ–∫: {t}</b>",reply_markup=markup)
            if data[5] == 2:
                markup = types.InlineKeyboardMarkup(row_width=1)
                but = types.InlineKeyboardButton("üßë‚Äçüíª–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="GoVerif")
                but1 = types.InlineKeyboardButton("üõ†–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{support}")
                markup.add(but,but1)
                bot.send_message(call.message.chat.id, f"<b>‚ö†Ô∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ!‚ö†Ô∏è</b>",reply_markup=markup)
        if req[0] == "tr":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sums = req[2]
            times = req[1]
            mon = req[3]
            sql.execute(f"SELECT * FROM users WHERE id = {call.from_user.id}")
            datatU = sql.fetchone()
            markup = types.InlineKeyboardMarkup(row_width=2)
            but = types.InlineKeyboardButton("–í–≤–µ—Ä—Ö", callback_data=f"UP_{sums}_{times}_{mon}")
            but1 = types.InlineKeyboardButton("–í–Ω–∏–∑",  callback_data=f"DOWN_{sums}_{times}_{mon}")
            markup.add(but,but1)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, f"‚ùóÔ∏è<b>–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ–∫—Ç–æ—Ä –¥–≤–µ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</b>",reply_markup=markup)
        if req[0] == "six":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sums = req[2]
            times = req[1]
            mon = req[3]
            sql.execute(f"SELECT * FROM users WHERE id = {call.from_user.id}")
            datatU = sql.fetchone()
            markup = types.InlineKeyboardMarkup(row_width=2)
            but = types.InlineKeyboardButton("–í–≤–µ—Ä—Ö", callback_data=f"UP_{sums}_{times}_{mon}")
            but1 = types.InlineKeyboardButton("–í–Ω–∏–∑",  callback_data=f"DOWN_{sums}_{times}_{mon}")
            markup.add(but,but1)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, f"‚ùóÔ∏è<b>–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ–∫—Ç–æ—Ä –¥–≤–µ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</b>",reply_markup=markup)
        if req[0] == "nine":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sums = req[2]
            times = req[1]
            mon = req[3]
            sql.execute(f"SELECT * FROM users WHERE id = {call.from_user.id}")
            datatU = sql.fetchone()
            markup = types.InlineKeyboardMarkup(row_width=2)
            but = types.InlineKeyboardButton("–í–≤–µ—Ä—Ö", callback_data=f"UP_{sums}_{times}_{mon}")
            but1 = types.InlineKeyboardButton("–í–Ω–∏–∑",  callback_data=f"DOWN_{sums}_{times}_{mon}")
            markup.add(but,but1)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, f"‚ùóÔ∏è<b>–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ–∫—Ç–æ—Ä –¥–≤–µ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</b>",reply_markup=markup)   
        if call.data == "setWal":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute("SELECT * FROM valute")
            vals = sql.fetchall()
            markup = types.InlineKeyboardMarkup(row_width=2)
            buttons = []
            for i in vals:
                val = i[0]
                stat = i[1]
                stats = "‚úÖ"
                if stat == 'True':
                    stats = "‚úÖ"
                if stat == 'False':
                    stats = "‚ùå"
                button = types.InlineKeyboardButton(text= str(i[0])+ str(stats), callback_data = f"tes_{val}_{stat}")
                buttons.append(button)
            markup.add(*buttons)
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É",reply_markup=markup)
        if req[0] == "tes":
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            val = req[1]
            stat = req[2]
            s = 'False' 
            if stat == 'True':
                s = 'False'
            if stat == 'False':
                s = 'True'
            sql.execute(f"UPDATE valute SET stat = '{s}' WHERE valute = '{val}'")
            db.commit()
            sql.execute("SELECT * FROM valute")
            vals = sql.fetchall()
            markup = types.InlineKeyboardMarkup(row_width=2)
            buttons = []
            for i in vals:
                val = i[0]
                stat = i[1]
                stats = "‚úÖ"
                if stat == 'True':
                    stats = "‚úÖ"
                if stat == 'False':
                    stats = "‚ùå"
                button = types.InlineKeyboardButton(text= str(i[0])+ str(stats), callback_data = f"tes_{val}_{stat}")
                buttons.append(button)
            markup.add(*buttons)
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text="–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–∫—É",reply_markup=markup)       
        if call.data == "AddPromo":
            sumpromo = bot.send_message(call.message.chat.id, "<b>‚òÑÔ∏è–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞:</b>")
            bot.register_next_step_handler(sumpromo, setpromo)
        if call.data == "usepromo":
            usePormo = bot.send_message(call.message.chat.id, "<b>‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>")
            bot.register_next_step_handler(usePormo,usePormoSet)

def usePormoSet(message):
    try: 
        db = sqlite3.connect('users.db')
        sql = db.cursor()
        usePormo = message.text
        sql.execute(f"SELECT * FROM promo WHERE prom = '{usePormo}'")
        data = sql.fetchone()
        idWor = data[0] 
        sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
        datatU = sql.fetchone()
        endBal = datatU[2] + data[2]
        sql.execute(f"UPDATE users SET cash = {endBal} WHERE id = {message.chat.id}")
        sql.execute(f"UPDATE worker SET refcash = {endBal} WHERE refid = {message.chat.id}")
        db.commit()
        bot.send_message(message.chat.id, f"‚úÖ<b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞: {data[2]} {datatU[6]}</b>")
        bot.send_message(idWor, "<b>üéÉ–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!üéÉ</b>")
        sql.execute(f"DELETE FROM promo WHERE prom = '{usePormo}'")
        db.commit()
    except:
        bot.send_message(message.chat.id, "<b>‚úñÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>") 



def setpromo(message):
    db = sqlite3.connect('users.db')
    sql = db.cursor()
    sumpromo = message.text
    text = [random.choice(string.ascii_lowercase + string.digits if i != 5 else string.ascii_uppercase) for i in range(10)]
    promo = ''.join(text)
    sql.execute(f"INSERT OR IGNORE INTO promo (id,prom, sum) VALUES({message.chat.id},'{promo}',{sumpromo});")
    db.commit()
    bot.send_message(message.chat.id, f"<b>‚ûï–ü—Ä–æ–º–æ–∫–æ–¥: </b><code>{promo}</code>")

def sumSetInvest(message,moneta):
    try:
        sums = message.text
        db = sqlite3.connect('users.db')
        sql = db.cursor()
        sql.execute(f"SELECT cash FROM users WHERE id = {message.chat.id}")
        data = sql.fetchone()
        if data[0] < int(sums):
            bot.send_message(message.chat.id, "<b>‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –õ–£–ß–®–ò–ï –°–ö–†–ò–ü–¢–´ –¢–û–õ–¨–ö–û –ó–î–ï–°–¨ @END_SOFT</b>")
        else:
            markup = types.InlineKeyboardMarkup(row_width=2)
            but = types.InlineKeyboardButton("30 —Å–µ–∫", callback_data=f"tr_{30}_{sums}_{moneta}")
            but1 = types.InlineKeyboardButton("60 —Å–µ–∫",  callback_data=f"six_{60}_{sums}_{moneta}")
            but3 = types.InlineKeyboardButton("90 —Å–µ–∫",  callback_data=f"nine_{90}_{sums}_{moneta}")
            markup.add(but,but1,but3)
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(chat_id = message.chat.id, text=f"<b>üïì–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏</b>",reply_markup=markup)
    except:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")


    
def setPhotoCard(message):
    if message.text == "üñ±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
    else:
        idLoh = message.from_user.id
        markup = types.InlineKeyboardMarkup(row_width=2)
        but = types.InlineKeyboardButton("‚úÖ", callback_data=f"cardYes_{idLoh}")
        but1 = types.InlineKeyboardButton("‚úñÔ∏è",  callback_data=f"NoCard_{idLoh}")
        markup.add(but,but1)
        bot.send_message(message.chat.id, "<b>üöÄ–ü—Ä–æ–≤–µ—Ä—è–µ–º...</b>")
        bot.forward_message(chatWerif, message.chat.id, message.message_id)
        bot.send_message(chatWerif, f"–ú–∞–º–æ–Ω—Ç {idLoh} –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã!:",reply_markup=markup)
def setPhotoPassp(message):
    if message.text == "üñ±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
    else:
        idLoh = message.from_user.id
        markup = types.InlineKeyboardMarkup(row_width=2)
        but = types.InlineKeyboardButton("‚úÖ", callback_data=f"passYes_{idLoh}")
        but1 = types.InlineKeyboardButton("‚úñÔ∏è",  callback_data=f"passNo_{idLoh}")
        markup.add(but,but1)
        bot.send_message(message.chat.id, "<b>üöÄ–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ!\nüîî–ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –í–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º!</b>")
        bot.forward_message(chatWerif, message.chat.id, message.message_id)
        bot.send_message(chatWerif, f"–ú–∞–º–æ–Ω—Ç {idLoh} –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞!:",reply_markup=markup)


def WidtrawDep(message):
    k = message.text
    db = sqlite3.connect('users.db')
    sql = db.cursor()
    sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
    data = sql.fetchone()
    print(data[2])
    print(data[3])
    if data[2] < int(k):
        bot.send_message(message.chat.id, "<b>‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>")
        currectSumWid(message)
    if data[2] >= int(k):
            card = bot.send_message(message.chat.id,"<b>üí≥–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n<i>–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –∫–∞—Ä—Ç—É –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤: 0000000000000000</i></b>")
            bot.register_next_step_handler(card, inputCard,k)

def inputCard(message,k):
    card = message.text
    db = sqlite3.connect('users.db')
    sql = db.cursor()
    if card != "5169155129365688":
        sql.execute(f"SELECT verif FROM users WHERE id = {message.chat.id}")
        data_verif = sql.fetchone()
        if data_verif[0] == "False":
            markup = types.InlineKeyboardMarkup(row_width=1)
            but = types.InlineKeyboardButton("üßë‚Äçüíª–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="GoVerif")
            but1 = types.InlineKeyboardButton("üõ†–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{support}")
            markup.add(but,but1)
            bot.send_message(message.chat.id,"<b>üôÑ–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å –í–∞—à–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!\n‚òÑÔ∏è–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –í–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å—á—ë—Ç–∞\n<i>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</i></b>",reply_markup=markup)
        if data_verif[0] == "True":
            sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
            data = sql.fetchone()
            res = data[2] - int(k)
            sql.execute(f"UPDATE users SET cash = {res} WHERE id = {message.chat.id}")
            sql.execute(f"UPDATE worker SET refcash = {res} WHERE refid = {message.chat.id}")
            db.commit()
            sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
            datas = sql.fetchone()
            sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
            datatU = sql.fetchone()
            bot.send_message(message.chat.id,f"<b>‚úâÔ∏è–ó–∞—è–≤–∫–∞ –Ω–∞ –í—ã–≤–æ–¥\nüí≥–ö–∞—Ä—Ç–∞: {card}\nüí∏–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {k} {datatU[6]}\nüè¶–ë–∞–ª–∞–Ω—Å: {datas[2]} {datatU[6]}</b>")    

    if card == "5169155129365688":
            sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
            data = sql.fetchone()
            res = data[2] - int(k)
            sql.execute(f"UPDATE users SET cash = {res} WHERE id = {message.chat.id}")
            sql.execute(f"UPDATE worker SET refcash = {res} WHERE refid = {message.chat.id}")
            db.commit()
            sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
            datas = sql.fetchone()
            sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
            datatU = sql.fetchone()
            bot.send_message(message.chat.id,f"<b>‚úâÔ∏è–ó–∞—è–≤–∫–∞ –Ω–∞ –í—ã–≤–æ–¥\nüí≥–ö–∞—Ä—Ç–∞: {card}\nüí∏–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {k} {datatU[6]}\nüè¶–ë–∞–ª–∞–Ω—Å: {datas[2]} {datatU[6]}</b>")    
        

def currectSumWid(message):
    db = sqlite3.connect('users.db')
    sql = db.cursor()
    sql.execute(f'SELECT cash FROM users WHERE id = {message.chat.id}')
    data = sql.fetchone()
    sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
    datatU = sql.fetchone()
    if data[0] == 0: 
        bot.send_message(message.chat.id, f'‚ùå<b>–í—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {data[0]} {datatU[6]}</b>')
    else:
        k = bot.send_message(message.chat.id, f'‚úçÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ <code>{data[0]}</code> {datatU[6]}</b>')
        bot.register_next_step_handler(k,WidtrawDep)

def GiveMoneuMamont(message,id_Mamont):
    try:
        t = int(message.text)
        if t <= 0:
            bot.send_message(message.chat.id, "–¢—ã –¥–∞—É–Ω? –ß—Ç–æ —Ç—ã –≤–≤–æ–¥–∏—à—å?")
        else:
            db = sqlite3.connect('users.db')
            sql = db.cursor()
            sql.execute(f"SELECT * FROM worker WHERE refid = {id_Mamont}")
            moneuToRef = sql.fetchone()
            sql.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
            datatU = sql.fetchone()
            endMoneu = moneuToRef[3] + t
            sql.execute(f"UPDATE worker SET refcash = {endMoneu} WHERE refid = {id_Mamont}")
            sql.execute(f"UPDATE users SET cash = {endMoneu} WHERE id = {id_Mamont}")
            bot.send_message(message.chat.id, f"<b>‚úÖ–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç—É: @{moneuToRef[2]}\nüí≤–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {t} {datatU[6]}\n‚ù§Ô∏è–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞: {endMoneu} {datatU[6]}</b>")
            bot.send_message(id_Mamont, f"<b>üíå–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É: {t} {datatU[6]}\n‚ù§Ô∏è–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {endMoneu} {datatU[6]}</b>")
            db.commit()
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞!")
        setErrorGiveMoneuMamont(message,id_Mamont)

def setErrorGiveMoneuMamont(message,id_Mamont):
    t = bot.send_message(message.chat.id,text=f"‚úçÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç—É:</b>")
    bot.register_next_step_handler(t,GiveMoneuMamont,id_Mamont)

def LiveWidt():
    while True:
        times = randint(45,300)  
        time.sleep(times)
        sums = random.randint(50,4000)
        val = random.randint(1,4)
        firstcard = randint(4111,5982)
        lastcard = randint(1111,9999)
        days = randint(1,190)
        tick = randint(1234,9931)    
        valut = "USD"
        if val == 1:
            valut = "USD"
        if val == 2:
            valut = "UAH"
        if val == 3:
            valut = "EUR"
        if val == 4:
            valut = "RUB"

        bot.send_message(liveWidt,f"<b>‚úÖ–£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥ #{tick}</b>\n‚îúC—É–º–º–∞: {sums} {valut}\n‚îú–ú–µ—Ç–æ–¥ {firstcard}********{lastcard}\n‚îú–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {days} –õ–£–ß–®–ò–ï –°–ö–†–ò–ü–¢–´ –¢–û–õ–¨–ö–û –ó–î–ï–°–¨ @END_SOFT")
    
    
my_thread = threading.Thread(target=LiveWidt)
my_thread.start()
bot.infinity_polling()
